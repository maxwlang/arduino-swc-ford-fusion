
/private/var/folders/65/nvm79_1j1zb91wxdq5f95fn00000gn/T/arduino/sketches/FDC5A3D49CE12F154FAA97AD43231FE7/arduino-swc-ford-fusion.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 cc 00 	jmp	0x198	; 0x198 <__ctors_end>
       4:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
       8:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
       c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      10:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      14:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      18:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      1c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      20:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      24:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      28:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      2c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      30:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      38:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      3c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      40:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__vector_16>
      44:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      48:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_18>
      4c:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__vector_19>
      50:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      54:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      58:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      5c:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      60:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>
      64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	48 65       	ori	r20, 0x58	; 88
      6a:	61 72       	andi	r22, 0x21	; 33
      6c:	74 42       	sbci	r23, 0x24	; 36
      6e:	65 61       	ori	r22, 0x15	; 21
      70:	74 00       	.word	0x0074	; ????

00000072 <ace_button::sEventLongReleased>:
      72:	4c 6f 6e 67 52 65 6c 65 61 73 65 64 00              LongReleased.

0000007f <ace_button::sEventRepeatPressed>:
      7f:	52 65 70 65 61 74 50 72 65 73 73 65 64 00           RepeatPressed.

0000008d <ace_button::sEventLongPressed>:
      8d:	4c 6f 6e 67 50 72 65 73 73 65 64 00                 LongPressed.

00000099 <ace_button::sEventDoubleClicked>:
      99:	44 6f 75 62 6c 65 43 6c 69 63 6b 65 64 00           DoubleClicked.

000000a7 <ace_button::sEventClicked>:
      a7:	43 6c 69 63 6b 65 64 00                             Clicked.

000000af <ace_button::sEventReleased>:
      af:	52 65 6c 65 61 73 65 64 00                          Released.

000000b8 <ace_button::sEventPressed>:
      b8:	50 72 65 73 73 65 64 00                             Pressed.

000000c0 <ace_button::sEventNames>:
      c0:	b8 00 af 00 a7 00 99 00 8d 00 7f 00 72 00 68 00     ............r.h.

000000d0 <ace_button::sEventUnknown>:
      d0:	28 75 6e 6b 6e 6f 77 6e 29 00                       (unknown).

000000da <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)::__c>:
      da:	3b 20 62 75 74 74 6f 6e 53 74 61 74 65 3a 20 00     ; buttonState: .

000000ea <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)::__c>:
      ea:	3b 20 65 76 65 6e 74 54 79 70 65 3a 20 00           ; eventType: .

000000f8 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)::__c>:
      f8:	76 69 72 74 75 61 6c 50 69 6e 3a 20 00              virtualPin: .

00000105 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)::__c>:
     105:	68 61 6e 64 6c 65 45 76 65 6e 74 28 29 3a 20 00     handleEvent(): .

00000115 <port_to_input_PGM>:
     115:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

0000011f <setup::__c>:
     11f:	73 65 74 75 70 28 29 3a 20 72 65 61 64 79 00        setup(): ready.

0000012e <setup::__c>:
     12e:	73 65 74 75 70 28 29 3a 20 62 65 67 69 6e 00        setup(): begin.

0000013d <port_to_mode_PGM>:
     13d:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000147 <port_to_output_PGM>:
     147:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000151 <digital_pin_to_port_PGM>:
     151:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     161:	03 03 03 03 02 02 03                                .......

00000168 <digital_pin_to_bit_mask_PGM>:
     168:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     178:	04 08 10 20 40 80 40                                ... @.@

0000017f <digital_pin_to_timer_PGM>:
     17f:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
     18f:	00 00 00 00 00 00 00                                .......

00000196 <__ctors_start>:
__ctors_start():
     196:	10 06       	cpc	r1, r16

00000198 <__ctors_end>:
__dtors_end():
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf ef       	ldi	r28, 0xFF	; 255
     19e:	d8 e0       	ldi	r29, 0x08	; 8
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1a4:	12 e0       	ldi	r17, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1a6:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1a8:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1aa:	e0 e9       	ldi	r30, 0x90	; 144
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1ac:	f7 e1       	ldi	r31, 0x17	; 23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1b0:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1b2:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1b4:	a6 35       	cpi	r26, 0x56	; 86
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1b6:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <__do_copy_data+0xc>

000001ba <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1ba:	23 e0       	ldi	r18, 0x03	; 3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1bc:	a6 e5       	ldi	r26, 0x56	; 86
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1be:	b2 e0       	ldi	r27, 0x02	; 2
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <.do_clear_bss_start>

000001c2 <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1c2:	1d 92       	st	X+, r1

000001c4 <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1c4:	a8 37       	cpi	r26, 0x78	; 120
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1c6:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <.do_clear_bss_loop>

000001ca <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1ca:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1cc:	cc ec       	ldi	r28, 0xCC	; 204
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1d0:	04 c0       	rjmp	.+8      	; 0x1da <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1d2:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1d4:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1d6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1da:	cb 3c       	cpi	r28, 0xCB	; 203
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1dc:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1de:	c9 f7       	brne	.-14     	; 0x1d2 <__do_global_ctors+0x8>
     1e0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <main>
     1e4:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <_exit>

000001e8 <__bad_interrupt>:
__vector_22():
     1e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ec <turnOffPWM>:
turnOffPWM():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     1ec:	84 30       	cpi	r24, 0x04	; 4
     1ee:	81 f0       	breq	.+32     	; 0x210 <turnOffPWM+0x24>
     1f0:	28 f4       	brcc	.+10     	; 0x1fc <turnOffPWM+0x10>
     1f2:	82 30       	cpi	r24, 0x02	; 2
     1f4:	e9 f0       	breq	.+58     	; 0x230 <turnOffPWM+0x44>
     1f6:	83 30       	cpi	r24, 0x03	; 3
     1f8:	f9 f0       	breq	.+62     	; 0x238 <turnOffPWM+0x4c>
     1fa:	08 95       	ret
     1fc:	88 30       	cpi	r24, 0x08	; 8
     1fe:	71 f0       	breq	.+28     	; 0x21c <turnOffPWM+0x30>
     200:	89 30       	cpi	r24, 0x09	; 9
     202:	91 f0       	breq	.+36     	; 0x228 <turnOffPWM+0x3c>
     204:	85 30       	cpi	r24, 0x05	; 5
     206:	b9 f4       	brne	.+46     	; 0x236 <turnOffPWM+0x4a>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     208:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     20c:	8f 7d       	andi	r24, 0xDF	; 223
     20e:	03 c0       	rjmp	.+6      	; 0x216 <turnOffPWM+0x2a>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     210:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     214:	8f 77       	andi	r24, 0x7F	; 127
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     216:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     21a:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     21c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     220:	8f 77       	andi	r24, 0x7F	; 127
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     222:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     226:	08 95       	ret
     228:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     22c:	8f 7d       	andi	r24, 0xDF	; 223
     22e:	f9 cf       	rjmp	.-14     	; 0x222 <turnOffPWM+0x36>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     230:	84 b5       	in	r24, 0x24	; 36
     232:	8f 77       	andi	r24, 0x7F	; 127
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     234:	84 bd       	out	0x24, r24	; 36
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     236:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     238:	84 b5       	in	r24, 0x24	; 36
     23a:	8f 7d       	andi	r24, 0xDF	; 223
     23c:	fb cf       	rjmp	.-10     	; 0x234 <turnOffPWM+0x48>

0000023e <digitalWrite>:
digitalWrite():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     244:	28 2f       	mov	r18, r24
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	f9 01       	movw	r30, r18
     24a:	e1 58       	subi	r30, 0x81	; 129
     24c:	fe 4f       	sbci	r31, 0xFE	; 254
     24e:	84 91       	lpm	r24, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     250:	f9 01       	movw	r30, r18
     252:	e8 59       	subi	r30, 0x98	; 152
     254:	fe 4f       	sbci	r31, 0xFE	; 254
     256:	d4 91       	lpm	r29, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     258:	f9 01       	movw	r30, r18
     25a:	ef 5a       	subi	r30, 0xAF	; 175
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	c4 91       	lpm	r28, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     260:	cc 23       	and	r28, r28
     262:	a9 f0       	breq	.+42     	; 0x28e <digitalWrite+0x50>
     264:	16 2f       	mov	r17, r22
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     266:	81 11       	cpse	r24, r1
     268:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffPWM>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     26c:	ec 2f       	mov	r30, r28
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	ee 0f       	add	r30, r30
     272:	ff 1f       	adc	r31, r31
     274:	e9 5b       	subi	r30, 0xB9	; 185
     276:	fe 4f       	sbci	r31, 0xFE	; 254
     278:	a5 91       	lpm	r26, Z+
     27a:	b4 91       	lpm	r27, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     27c:	8f b7       	in	r24, 0x3f	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     27e:	f8 94       	cli
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     280:	ec 91       	ld	r30, X
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     282:	11 11       	cpse	r17, r1
     284:	08 c0       	rjmp	.+16     	; 0x296 <digitalWrite+0x58>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     286:	d0 95       	com	r29
     288:	de 23       	and	r29, r30
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     28a:	dc 93       	st	X, r29
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     28c:	8f bf       	out	0x3f, r24	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	1f 91       	pop	r17
     294:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     296:	de 2b       	or	r29, r30
     298:	f8 cf       	rjmp	.-16     	; 0x28a <digitalWrite+0x4c>

0000029a <pinMode>:
pinMode():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	fc 01       	movw	r30, r24
     2a2:	e8 59       	subi	r30, 0x98	; 152
     2a4:	fe 4f       	sbci	r31, 0xFE	; 254
     2a6:	24 91       	lpm	r18, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     2a8:	8f 5a       	subi	r24, 0xAF	; 175
     2aa:	9e 4f       	sbci	r25, 0xFE	; 254
     2ac:	fc 01       	movw	r30, r24
     2ae:	84 91       	lpm	r24, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     2b0:	88 23       	and	r24, r24
     2b2:	d1 f0       	breq	.+52     	; 0x2e8 <pinMode+0x4e>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	88 0f       	add	r24, r24
     2b8:	99 1f       	adc	r25, r25
     2ba:	fc 01       	movw	r30, r24
     2bc:	e3 5c       	subi	r30, 0xC3	; 195
     2be:	fe 4f       	sbci	r31, 0xFE	; 254
     2c0:	a5 91       	lpm	r26, Z+
     2c2:	b4 91       	lpm	r27, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     2c4:	fc 01       	movw	r30, r24
     2c6:	e9 5b       	subi	r30, 0xB9	; 185
     2c8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ca:	c5 91       	lpm	r28, Z+
     2cc:	d4 91       	lpm	r29, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     2ce:	61 11       	cpse	r22, r1
     2d0:	0e c0       	rjmp	.+28     	; 0x2ee <pinMode+0x54>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     2d2:	9f b7       	in	r25, 0x3f	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
     2d4:	f8 94       	cli
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     2d6:	8c 91       	ld	r24, X
     2d8:	e2 2f       	mov	r30, r18
     2da:	e0 95       	com	r30
     2dc:	8e 23       	and	r24, r30
     2de:	8c 93       	st	X, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     2e0:	28 81       	ld	r18, Y
     2e2:	e2 23       	and	r30, r18
     2e4:	e8 83       	st	Y, r30
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:46
    SREG = oldSREG;
     2e6:	9f bf       	out	0x3f, r25	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     2ee:	8f b7       	in	r24, 0x3f	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     2f0:	f8 94       	cli
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     2f2:	ec 91       	ld	r30, X
     2f4:	e2 2b       	or	r30, r18
     2f6:	ec 93       	st	X, r30
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     2f8:	8f bf       	out	0x3f, r24	; 63
     2fa:	f6 cf       	rjmp	.-20     	; 0x2e8 <pinMode+0x4e>

000002fc <analogRead>:
analogRead():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_analog.c:49
int analogRead(uint8_t pin)
{

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
     2fc:	88 30       	cpi	r24, 0x08	; 8
     2fe:	20 f0       	brcs	.+8      	; 0x308 <analogRead+0xc>
     300:	8d 30       	cpi	r24, 0x0D	; 13
     302:	08 f4       	brcc	.+2      	; 0x306 <analogRead+0xa>
     304:	8d e0       	ldi	r24, 0x0D	; 13
     306:	8e 50       	subi	r24, 0x0E	; 14
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_analog.c:68
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
     308:	87 70       	andi	r24, 0x07	; 7
     30a:	80 64       	ori	r24, 0x40	; 64
     30c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_analog.c:76
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADC)
  // start the conversion
  ADCSRA |= _BV(ADSC);
     310:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     314:	80 64       	ori	r24, 0x40	; 64
     316:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_analog.c:79

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC)) {};
     31a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     31e:	86 fd       	sbrc	r24, 6
     320:	fc cf       	rjmp	.-8      	; 0x31a <analogRead+0x1e>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_analog.c:83

  // ADC macro takes care of reading ADC register.
 	// avr-gcc implements the proper reading order: ADCL is read first.
 	return ADC;
     322:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     326:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_analog.c:87
#else
  return 0;
#endif
}
     32a:	08 95       	ret

0000032c <micros>:
micros():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     32c:	3f b7       	in	r19, 0x3f	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     32e:	f8 94       	cli
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     330:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <timer0_overflow_count>
     334:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <timer0_overflow_count+0x1>
     338:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <timer0_overflow_count+0x2>
     33c:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <timer0_overflow_count+0x3>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     340:	26 b5       	in	r18, 0x26	; 38
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     342:	a8 9b       	sbis	0x15, 0	; 21
     344:	05 c0       	rjmp	.+10     	; 0x350 <micros+0x24>
     346:	2f 3f       	cpi	r18, 0xFF	; 255
     348:	19 f0       	breq	.+6      	; 0x350 <micros+0x24>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	a1 1d       	adc	r26, r1
     34e:	b1 1d       	adc	r27, r1
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     350:	3f bf       	out	0x3f, r19	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     352:	ba 2f       	mov	r27, r26
     354:	a9 2f       	mov	r26, r25
     356:	98 2f       	mov	r25, r24
     358:	88 27       	eor	r24, r24
     35a:	bc 01       	movw	r22, r24
     35c:	cd 01       	movw	r24, r26
     35e:	62 0f       	add	r22, r18
     360:	71 1d       	adc	r23, r1
     362:	81 1d       	adc	r24, r1
     364:	91 1d       	adc	r25, r1
     366:	43 e0       	ldi	r20, 0x03	; 3
     368:	66 0f       	add	r22, r22
     36a:	77 1f       	adc	r23, r23
     36c:	88 1f       	adc	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	4a 95       	dec	r20
     372:	d1 f7       	brne	.-12     	; 0x368 <micros+0x3c>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     374:	08 95       	ret

00000376 <delay>:
delay():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     376:	8f 92       	push	r8
     378:	9f 92       	push	r9
     37a:	af 92       	push	r10
     37c:	bf 92       	push	r11
     37e:	cf 92       	push	r12
     380:	df 92       	push	r13
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	6b 01       	movw	r12, r22
     388:	7c 01       	movw	r14, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     38a:	0e 94 96 01 	call	0x32c	; 0x32c <micros>
     38e:	4b 01       	movw	r8, r22
     390:	5c 01       	movw	r10, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     392:	c1 14       	cp	r12, r1
     394:	d1 04       	cpc	r13, r1
     396:	e1 04       	cpc	r14, r1
     398:	f1 04       	cpc	r15, r1
     39a:	b9 f0       	breq	.+46     	; 0x3ca <delay+0x54>
     39c:	0e 94 96 01 	call	0x32c	; 0x32c <micros>
     3a0:	68 19       	sub	r22, r8
     3a2:	79 09       	sbc	r23, r9
     3a4:	8a 09       	sbc	r24, r10
     3a6:	9b 09       	sbc	r25, r11
     3a8:	68 3e       	cpi	r22, 0xE8	; 232
     3aa:	73 40       	sbci	r23, 0x03	; 3
     3ac:	81 05       	cpc	r24, r1
     3ae:	91 05       	cpc	r25, r1
     3b0:	80 f3       	brcs	.-32     	; 0x392 <delay+0x1c>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	c2 1a       	sub	r12, r18
     3b6:	d1 08       	sbc	r13, r1
     3b8:	e1 08       	sbc	r14, r1
     3ba:	f1 08       	sbc	r15, r1
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     3bc:	88 ee       	ldi	r24, 0xE8	; 232
     3be:	88 0e       	add	r8, r24
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	98 1e       	adc	r9, r24
     3c4:	a1 1c       	adc	r10, r1
     3c6:	b1 1c       	adc	r11, r1
     3c8:	e4 cf       	rjmp	.-56     	; 0x392 <delay+0x1c>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:406
    }
  }
}
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
     3ce:	df 90       	pop	r13
     3d0:	cf 90       	pop	r12
     3d2:	bf 90       	pop	r11
     3d4:	af 90       	pop	r10
     3d6:	9f 90       	pop	r9
     3d8:	8f 90       	pop	r8
     3da:	08 95       	ret

000003dc <Print::write(unsigned char const*, unsigned int)>:
write():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     3dc:	af 92       	push	r10
     3de:	bf 92       	push	r11
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	6c 01       	movw	r12, r24
     3f2:	7b 01       	movw	r14, r22
     3f4:	8b 01       	movw	r16, r22
     3f6:	04 0f       	add	r16, r20
     3f8:	15 1f       	adc	r17, r21
     3fa:	eb 01       	movw	r28, r22
     3fc:	5e 01       	movw	r10, r28
     3fe:	ae 18       	sub	r10, r14
     400:	bf 08       	sbc	r11, r15
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     402:	c0 17       	cp	r28, r16
     404:	d1 07       	cpc	r29, r17
     406:	59 f0       	breq	.+22     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     408:	69 91       	ld	r22, Y+
     40a:	d6 01       	movw	r26, r12
     40c:	ed 91       	ld	r30, X+
     40e:	fc 91       	ld	r31, X
     410:	01 90       	ld	r0, Z+
     412:	f0 81       	ld	r31, Z
     414:	e0 2d       	mov	r30, r0
     416:	c6 01       	movw	r24, r12
     418:	09 95       	icall
     41a:	89 2b       	or	r24, r25
     41c:	79 f7       	brne	.-34     	; 0x3fc <Print::write(unsigned char const*, unsigned int)+0x20>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     41e:	c5 01       	movw	r24, r10
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	08 95       	ret

00000436 <HardwareSerial::availableForWrite()>:
availableForWrite():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     436:	fc 01       	movw	r30, r24
     438:	53 8d       	ldd	r21, Z+27	; 0x1b
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     43a:	44 8d       	ldd	r20, Z+28	; 0x1c
     43c:	25 2f       	mov	r18, r21
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	84 2f       	mov	r24, r20
     442:	90 e0       	ldi	r25, 0x00	; 0
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     444:	82 1b       	sub	r24, r18
     446:	93 0b       	sbc	r25, r19
     448:	54 17       	cp	r21, r20
     44a:	10 f0       	brcs	.+4      	; 0x450 <HardwareSerial::availableForWrite()+0x1a>
     44c:	cf 96       	adiw	r24, 0x3f	; 63
     44e:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     450:	01 97       	sbiw	r24, 0x01	; 1
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     452:	08 95       	ret

00000454 <HardwareSerial::read()>:
read():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     454:	fc 01       	movw	r30, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     456:	91 8d       	ldd	r25, Z+25	; 0x19
     458:	82 8d       	ldd	r24, Z+26	; 0x1a
     45a:	98 17       	cp	r25, r24
     45c:	61 f0       	breq	.+24     	; 0x476 <HardwareSerial::read()+0x22>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     45e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     460:	ae 0f       	add	r26, r30
     462:	bf 2f       	mov	r27, r31
     464:	b1 1d       	adc	r27, r1
     466:	5d 96       	adiw	r26, 0x1d	; 29
     468:	8c 91       	ld	r24, X
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     46a:	92 8d       	ldd	r25, Z+26	; 0x1a
     46c:	9f 5f       	subi	r25, 0xFF	; 255
     46e:	9f 73       	andi	r25, 0x3F	; 63
     470:	92 8f       	std	Z+26, r25	; 0x1a
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     476:	8f ef       	ldi	r24, 0xFF	; 255
     478:	9f ef       	ldi	r25, 0xFF	; 255
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     47a:	08 95       	ret

0000047c <HardwareSerial::peek()>:
peek():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     47c:	fc 01       	movw	r30, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     47e:	91 8d       	ldd	r25, Z+25	; 0x19
     480:	82 8d       	ldd	r24, Z+26	; 0x1a
     482:	98 17       	cp	r25, r24
     484:	31 f0       	breq	.+12     	; 0x492 <HardwareSerial::peek()+0x16>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     486:	82 8d       	ldd	r24, Z+26	; 0x1a
     488:	e8 0f       	add	r30, r24
     48a:	f1 1d       	adc	r31, r1
     48c:	85 8d       	ldd	r24, Z+29	; 0x1d
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	9f ef       	ldi	r25, 0xFF	; 255
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     496:	08 95       	ret

00000498 <HardwareSerial::available()>:
available():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     498:	fc 01       	movw	r30, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     49a:	91 8d       	ldd	r25, Z+25	; 0x19
     49c:	22 8d       	ldd	r18, Z+26	; 0x1a
     49e:	89 2f       	mov	r24, r25
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	80 5c       	subi	r24, 0xC0	; 192
     4a4:	9f 4f       	sbci	r25, 0xFF	; 255
     4a6:	82 1b       	sub	r24, r18
     4a8:	91 09       	sbc	r25, r1
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     4aa:	8f 73       	andi	r24, 0x3F	; 63
     4ac:	99 27       	eor	r25, r25
     4ae:	08 95       	ret

000004b0 <Serial0_available()>:
Serial0_available():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     4b0:	8a e6       	ldi	r24, 0x6A	; 106
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	0e 94 4c 02 	call	0x498	; 0x498 <HardwareSerial::available()>
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	89 2b       	or	r24, r25
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <Serial0_available()+0x10>
     4be:	20 e0       	ldi	r18, 0x00	; 0
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
     4c0:	82 2f       	mov	r24, r18
     4c2:	08 95       	ret

000004c4 <serialEventRun()>:
serialEventRun():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	89 2b       	or	r24, r25
     4ca:	29 f0       	breq	.+10     	; 0x4d6 <serialEventRun()+0x12>
     4cc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Serial0_available()>
     4d0:	81 11       	cpse	r24, r1
     4d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     4d6:	08 95       	ret

000004d8 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     4d8:	fc 01       	movw	r30, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     4da:	a4 8d       	ldd	r26, Z+28	; 0x1c
     4dc:	a8 0f       	add	r26, r24
     4de:	b9 2f       	mov	r27, r25
     4e0:	b1 1d       	adc	r27, r1
     4e2:	a3 5a       	subi	r26, 0xA3	; 163
     4e4:	bf 4f       	sbci	r27, 0xFF	; 255
     4e6:	2c 91       	ld	r18, X
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     4e8:	84 8d       	ldd	r24, Z+28	; 0x1c
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	8f 73       	andi	r24, 0x3F	; 63
     4f0:	99 27       	eor	r25, r25
     4f2:	84 8f       	std	Z+28, r24	; 0x1c
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     4f4:	a6 89       	ldd	r26, Z+22	; 0x16
     4f6:	b7 89       	ldd	r27, Z+23	; 0x17
     4f8:	2c 93       	st	X, r18
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     4fa:	a0 89       	ldd	r26, Z+16	; 0x10
     4fc:	b1 89       	ldd	r27, Z+17	; 0x11
     4fe:	8c 91       	ld	r24, X
     500:	83 70       	andi	r24, 0x03	; 3
     502:	80 64       	ori	r24, 0x40	; 64
     504:	8c 93       	st	X, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     506:	93 8d       	ldd	r25, Z+27	; 0x1b
     508:	84 8d       	ldd	r24, Z+28	; 0x1c
     50a:	98 13       	cpse	r25, r24
     50c:	06 c0       	rjmp	.+12     	; 0x51a <HardwareSerial::_tx_udr_empty_irq()+0x42>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     50e:	02 88       	ldd	r0, Z+18	; 0x12
     510:	f3 89       	ldd	r31, Z+19	; 0x13
     512:	e0 2d       	mov	r30, r0
     514:	80 81       	ld	r24, Z
     516:	8f 7d       	andi	r24, 0xDF	; 223
     518:	80 83       	st	Z, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     51a:	08 95       	ret

0000051c <HardwareSerial::write(unsigned char)>:
write():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	ec 01       	movw	r28, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	88 8f       	std	Y+24, r24	; 0x18
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     52e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     530:	8c 8d       	ldd	r24, Y+28	; 0x1c
     532:	98 13       	cpse	r25, r24
     534:	1a c0       	rjmp	.+52     	; 0x56a <HardwareSerial::write(unsigned char)+0x4e>
     536:	e8 89       	ldd	r30, Y+16	; 0x10
     538:	f9 89       	ldd	r31, Y+17	; 0x11
     53a:	80 81       	ld	r24, Z
     53c:	85 ff       	sbrs	r24, 5
     53e:	15 c0       	rjmp	.+42     	; 0x56a <HardwareSerial::write(unsigned char)+0x4e>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     540:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/maxwlang/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     542:	f8 94       	cli
write():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     544:	ee 89       	ldd	r30, Y+22	; 0x16
     546:	ff 89       	ldd	r31, Y+23	; 0x17
     548:	60 83       	st	Z, r22
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     54a:	e8 89       	ldd	r30, Y+16	; 0x10
     54c:	f9 89       	ldd	r31, Y+17	; 0x11
     54e:	80 81       	ld	r24, Z
     550:	83 70       	andi	r24, 0x03	; 3
     552:	80 64       	ori	r24, 0x40	; 64
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     554:	80 83       	st	Z, r24
__iRestore():
/Users/maxwlang/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     556:	9f bf       	out	0x3f, r25	; 63
write():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	08 95       	ret
     56a:	f6 2e       	mov	r15, r22
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     56c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     56e:	10 e0       	ldi	r17, 0x00	; 0
     570:	0f 5f       	subi	r16, 0xFF	; 255
     572:	1f 4f       	sbci	r17, 0xFF	; 255
     574:	0f 73       	andi	r16, 0x3F	; 63
     576:	11 27       	eor	r17, r17
     578:	e0 2e       	mov	r14, r16
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     57a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     57c:	8e 11       	cpse	r24, r14
     57e:	0c c0       	rjmp	.+24     	; 0x598 <HardwareSerial::write(unsigned char)+0x7c>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	07 fc       	sbrc	r0, 7
     584:	fa cf       	rjmp	.-12     	; 0x57a <HardwareSerial::write(unsigned char)+0x5e>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     586:	e8 89       	ldd	r30, Y+16	; 0x10
     588:	f9 89       	ldd	r31, Y+17	; 0x11
     58a:	80 81       	ld	r24, Z
     58c:	85 ff       	sbrs	r24, 5
     58e:	f5 cf       	rjmp	.-22     	; 0x57a <HardwareSerial::write(unsigned char)+0x5e>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     590:	ce 01       	movw	r24, r28
     592:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <HardwareSerial::_tx_udr_empty_irq()>
     596:	f1 cf       	rjmp	.-30     	; 0x57a <HardwareSerial::write(unsigned char)+0x5e>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     598:	eb 8d       	ldd	r30, Y+27	; 0x1b
     59a:	ec 0f       	add	r30, r28
     59c:	fd 2f       	mov	r31, r29
     59e:	f1 1d       	adc	r31, r1
     5a0:	e3 5a       	subi	r30, 0xA3	; 163
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	f0 82       	st	Z, r15
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     5a6:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/Users/maxwlang/Library/Arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5a8:	f8 94       	cli
write():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     5aa:	0b 8f       	std	Y+27, r16	; 0x1b
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     5ac:	ea 89       	ldd	r30, Y+18	; 0x12
     5ae:	fb 89       	ldd	r31, Y+19	; 0x13
     5b0:	80 81       	ld	r24, Z
     5b2:	80 62       	ori	r24, 0x20	; 32
     5b4:	cf cf       	rjmp	.-98     	; 0x554 <HardwareSerial::write(unsigned char)+0x38>

000005b6 <Print::print(__FlashStringHelper const*) [clone .constprop.11]>:
print():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	8c 01       	movw	r16, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     5c0:	d0 e0       	ldi	r29, 0x00	; 0
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     5c4:	f8 01       	movw	r30, r16
     5c6:	ec 0f       	add	r30, r28
     5c8:	fd 1f       	adc	r31, r29
     5ca:	64 91       	lpm	r22, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     5cc:	66 23       	and	r22, r22
     5ce:	41 f0       	breq	.+16     	; 0x5e0 <Print::print(__FlashStringHelper const*) [clone .constprop.11]+0x2a>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     5d0:	8a e6       	ldi	r24, 0x6A	; 106
     5d2:	92 e0       	ldi	r25, 0x02	; 2
     5d4:	0e 94 8e 02 	call	0x51c	; 0x51c <HardwareSerial::write(unsigned char)>
     5d8:	89 2b       	or	r24, r25
     5da:	11 f0       	breq	.+4      	; 0x5e0 <Print::print(__FlashStringHelper const*) [clone .constprop.11]+0x2a>
     5dc:	21 96       	adiw	r28, 0x01	; 1
     5de:	f2 cf       	rjmp	.-28     	; 0x5c4 <Print::print(__FlashStringHelper const*) [clone .constprop.11]+0xe>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     5e0:	ce 01       	movw	r24, r28
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <HardwareSerial::flush()>:
flush():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     5f2:	88 8d       	ldd	r24, Y+24	; 0x18
     5f4:	88 23       	and	r24, r24
     5f6:	b9 f0       	breq	.+46     	; 0x626 <HardwareSerial::flush()+0x3a>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     5f8:	aa 89       	ldd	r26, Y+18	; 0x12
     5fa:	bb 89       	ldd	r27, Y+19	; 0x13
     5fc:	e8 89       	ldd	r30, Y+16	; 0x10
     5fe:	f9 89       	ldd	r31, Y+17	; 0x11
     600:	8c 91       	ld	r24, X
     602:	85 fd       	sbrc	r24, 5
     604:	03 c0       	rjmp	.+6      	; 0x60c <HardwareSerial::flush()+0x20>
     606:	80 81       	ld	r24, Z
     608:	86 fd       	sbrc	r24, 6
     60a:	0d c0       	rjmp	.+26     	; 0x626 <HardwareSerial::flush()+0x3a>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	07 fc       	sbrc	r0, 7
     610:	f7 cf       	rjmp	.-18     	; 0x600 <HardwareSerial::flush()+0x14>
     612:	8c 91       	ld	r24, X
     614:	85 ff       	sbrs	r24, 5
     616:	f2 cf       	rjmp	.-28     	; 0x5fc <HardwareSerial::flush()+0x10>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     618:	80 81       	ld	r24, Z
     61a:	85 ff       	sbrs	r24, 5
     61c:	ed cf       	rjmp	.-38     	; 0x5f8 <HardwareSerial::flush()+0xc>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     61e:	ce 01       	movw	r24, r28
     620:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <HardwareSerial::_tx_udr_empty_irq()>
     624:	e9 cf       	rjmp	.-46     	; 0x5f8 <HardwareSerial::flush()+0xc>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <ace_button::LadderButtonConfig::getVirtualPin() const>:
getVirtualPin():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:74
        ? mPressedState : (mPressedState ^ 0x1);
    button->checkState(buttonState);
  }
}

uint8_t LadderButtonConfig::getVirtualPin() const {
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	ec 01       	movw	r28, r24
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:75
  uint16_t level = analogRead(mPin);
     632:	8c 89       	ldd	r24, Y+20	; 0x14
     634:	0e 94 7e 01 	call	0x2fc	; 0x2fc <analogRead>
     638:	dc 01       	movw	r26, r24
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:76
  return extractIndex(mNumLevels, mLevels, level);
     63a:	68 8d       	ldd	r22, Y+24	; 0x18
     63c:	79 8d       	ldd	r23, Y+25	; 0x19
     63e:	4d 89       	ldd	r20, Y+21	; 0x15
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:83

uint8_t LadderButtonConfig::extractIndex(uint8_t numLevels,
    uint16_t const levels[], uint16_t level) {

  uint8_t i;
  for (i = 0; i < numLevels - 1; i++) {
     640:	80 e0       	ldi	r24, 0x00	; 0
extractIndex():
     642:	41 50       	subi	r20, 0x01	; 1
     644:	55 0b       	sbc	r21, r21
     646:	e8 2f       	mov	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	e4 17       	cp	r30, r20
     64c:	f5 07       	cpc	r31, r21
     64e:	94 f4       	brge	.+36     	; 0x674 <ace_button::LadderButtonConfig::getVirtualPin() const+0x48>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:90
    // NOTE(brian): This will overflow a 16-bit ADC. If we need to support that,
    // a possible formula that avoids uint32_t instructions might be something
    // like:
    //    threshold = levels[i]/2 + levels[i+1]/2
    //        + (((levels[i] & 0x1) + (levels[i+1] & 0x1)) / 2)
    uint16_t threshold = (levels[i] + levels[i+1]) / 2;
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	e6 0f       	add	r30, r22
     656:	f7 1f       	adc	r31, r23
     658:	22 81       	ldd	r18, Z+2	; 0x02
     65a:	33 81       	ldd	r19, Z+3	; 0x03
     65c:	01 90       	ld	r0, Z+
     65e:	f0 81       	ld	r31, Z
     660:	e0 2d       	mov	r30, r0
     662:	2e 0f       	add	r18, r30
     664:	3f 1f       	adc	r19, r31
     666:	36 95       	lsr	r19
     668:	27 95       	ror	r18
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:92

    if (level < threshold) return i;
     66a:	a2 17       	cp	r26, r18
     66c:	b3 07       	cpc	r27, r19
     66e:	10 f0       	brcs	.+4      	; 0x674 <ace_button::LadderButtonConfig::getVirtualPin() const+0x48>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:83

uint8_t LadderButtonConfig::extractIndex(uint8_t numLevels,
    uint16_t const levels[], uint16_t level) {

  uint8_t i;
  for (i = 0; i < numLevels - 1; i++) {
     670:	8f 5f       	subi	r24, 0xFF	; 255
     672:	e9 cf       	rjmp	.-46     	; 0x646 <ace_button::LadderButtonConfig::getVirtualPin() const+0x1a>
getVirtualPin():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:77
}

uint8_t LadderButtonConfig::getVirtualPin() const {
  uint16_t level = analogRead(mPin);
  return extractIndex(mNumLevels, mLevels, level);
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <ace_button::LadderButtonConfig::readButton(unsigned char)>:
readButton():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:53
  }

  // TODO: Verify that the levels[] are monotonically increasing.
}

int LadderButtonConfig::readButton(uint8_t pin) {
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	ec 01       	movw	r28, r24
     682:	16 2f       	mov	r17, r22
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:54
  uint8_t virtualPin = getVirtualPin();
     684:	e8 81       	ld	r30, Y
     686:	f9 81       	ldd	r31, Y+1	; 0x01
     688:	04 80       	ldd	r0, Z+4	; 0x04
     68a:	f5 81       	ldd	r31, Z+5	; 0x05
     68c:	e0 2d       	mov	r30, r0
     68e:	09 95       	icall
     690:	9f 89       	ldd	r25, Y+23	; 0x17
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:55
  return (virtualPin == pin) ? mPressedState : (mPressedState ^ 0x1);
     692:	81 13       	cpse	r24, r17
     694:	06 c0       	rjmp	.+12     	; 0x6a2 <ace_button::LadderButtonConfig::readButton(unsigned char)+0x28>
     696:	89 2f       	mov	r24, r25
     698:	90 e0       	ldi	r25, 0x00	; 0
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:56
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	1f 91       	pop	r17
     6a0:	08 95       	ret
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:55
  // TODO: Verify that the levels[] are monotonically increasing.
}

int LadderButtonConfig::readButton(uint8_t pin) {
  uint8_t virtualPin = getVirtualPin();
  return (virtualPin == pin) ? mPressedState : (mPressedState ^ 0x1);
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	89 27       	eor	r24, r25
     6a6:	f8 cf       	rjmp	.-16     	; 0x698 <ace_button::LadderButtonConfig::readButton(unsigned char)+0x1e>

000006a8 <ace_button::AceButton::handleEvent(unsigned char)>:
handleEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:439
    handleEvent(kEventHeartBeat);
    mLastHeartBeatTime = now;
  }
}

void AceButton::handleEvent(uint8_t eventType) {
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:440
  mButtonConfig->dispatchEvent(this, eventType, getLastButtonState());
     6ac:	dc 01       	movw	r26, r24
     6ae:	ed 91       	ld	r30, X+
     6b0:	fc 91       	ld	r31, X
dispatchEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:373
     * method.
     */
    void dispatchEvent(AceButton* button, uint8_t eventType,
        uint8_t buttonState) const {

      if (! mEventHandler) return;
     6b2:	a2 81       	ldd	r26, Z+2	; 0x02
     6b4:	b3 81       	ldd	r27, Z+3	; 0x03
     6b6:	10 97       	sbiw	r26, 0x00	; 0
     6b8:	b9 f0       	breq	.+46     	; 0x6e8 <ace_button::AceButton::handleEvent(unsigned char)+0x40>
     6ba:	ec 01       	movw	r28, r24
     6bc:	2e 81       	ldd	r18, Y+6	; 0x06
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:375

      if (isFeature(kInternalFeatureIEventHandler)) {
     6be:	44 81       	ldd	r20, Z+4	; 0x04
     6c0:	55 81       	ldd	r21, Z+5	; 0x05
     6c2:	57 ff       	sbrs	r21, 7
     6c4:	0c c0       	rjmp	.+24     	; 0x6de <ace_button::AceButton::handleEvent(unsigned char)+0x36>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:378
        IEventHandler* eventHandler =
            reinterpret_cast<IEventHandler*>(mEventHandler);
        eventHandler->handleEvent(button, eventType, buttonState);
     6c6:	ed 91       	ld	r30, X+
     6c8:	fc 91       	ld	r31, X
     6ca:	11 97       	sbiw	r26, 0x01	; 1
     6cc:	01 90       	ld	r0, Z+
     6ce:	f0 81       	ld	r31, Z
     6d0:	e0 2d       	mov	r30, r0
     6d2:	46 2f       	mov	r20, r22
     6d4:	bc 01       	movw	r22, r24
     6d6:	cd 01       	movw	r24, r26
handleEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:441
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
dispatchEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:378
     6dc:	09 94       	ijmp
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:382
      } else {
        EventHandler eventHandler =
            reinterpret_cast<EventHandler>(mEventHandler);
        eventHandler(button, eventType, buttonState);
     6de:	42 2f       	mov	r20, r18
     6e0:	fd 01       	movw	r30, r26
handleEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:441
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
dispatchEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:382
     6e6:	09 94       	ijmp
handleEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:441
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <ace_button::ButtonConfig::readButton(unsigned char)>:
readButton():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:317
     * because that's the return type of digitalRead().
     *
     * Note: This should have been a const function. I cannot change it now
     * without breaking backwards compatibility.
     */
    virtual int readButton(uint8_t pin) {
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
digitalRead():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	fb 01       	movw	r30, r22
     6f6:	e1 58       	subi	r30, 0x81	; 129
     6f8:	fe 4f       	sbci	r31, 0xFE	; 254
     6fa:	84 91       	lpm	r24, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     6fc:	fb 01       	movw	r30, r22
     6fe:	e8 59       	subi	r30, 0x98	; 152
     700:	fe 4f       	sbci	r31, 0xFE	; 254
     702:	d4 91       	lpm	r29, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     704:	6f 5a       	subi	r22, 0xAF	; 175
     706:	7e 4f       	sbci	r23, 0xFE	; 254
     708:	fb 01       	movw	r30, r22
     70a:	c4 91       	lpm	r28, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     70c:	cc 23       	and	r28, r28
     70e:	a1 f0       	breq	.+40     	; 0x738 <ace_button::ButtonConfig::readButton(unsigned char)+0x4a>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     710:	81 11       	cpse	r24, r1
     712:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffPWM>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     716:	ec 2f       	mov	r30, r28
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	ee 0f       	add	r30, r30
     71c:	ff 1f       	adc	r31, r31
     71e:	eb 5e       	subi	r30, 0xEB	; 235
     720:	fe 4f       	sbci	r31, 0xFE	; 254
     722:	a5 91       	lpm	r26, Z+
     724:	b4 91       	lpm	r27, Z
     726:	ec 91       	ld	r30, X
     728:	ed 23       	and	r30, r29
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	09 f4       	brne	.+2      	; 0x732 <ace_button::ButtonConfig::readButton(unsigned char)+0x44>
     730:	80 e0       	ldi	r24, 0x00	; 0
readButton():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:319
      return digitalRead(pin);
    }
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	fa cf       	rjmp	.-12     	; 0x732 <ace_button::ButtonConfig::readButton(unsigned char)+0x44>

0000073e <LadderButtonConfig::getVirtualPin() const>:
getVirtualPin():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:76
    // Inheriting the constructor from the base class
    using ace_button::LadderButtonConfig::LadderButtonConfig;

    // Override the getVirtualPin method
    uint8_t getVirtualPin() const override {
        uint16_t raw = analogRead(SWC_ANALOG_PIN);
     73e:	8e e0       	ldi	r24, 0x0E	; 14
     740:	0e 94 7e 01 	call	0x2fc	; 0x2fc <analogRead>
_ZNK18LadderButtonConfig14calculateLevelEj.isra.4():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:96
        int vin = 5; // Using 5V through the known 10k resistor
        float vOut = 0;
        float r1 = 10000; // Using a known 10k resistor
        float buffer = 0;

        buffer = raw * vin;
     744:	25 e0       	ldi	r18, 0x05	; 5
     746:	ac 01       	movw	r20, r24
     748:	24 9f       	mul	r18, r20
     74a:	c0 01       	movw	r24, r0
     74c:	25 9f       	mul	r18, r21
     74e:	90 0d       	add	r25, r0
     750:	11 24       	eor	r1, r1
     752:	bc 01       	movw	r22, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatunsisf>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:97
        vOut = (buffer)/1024.0;
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	40 e8       	ldi	r20, 0x80	; 128
     762:	5a e3       	ldi	r21, 0x3A	; 58
     764:	0e 94 31 0b 	call	0x1662	; 0x1662 <__mulsf3>
     768:	9b 01       	movw	r18, r22
     76a:	ac 01       	movw	r20, r24
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:98
        buffer = (vin/vOut) - 1;
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	80 ea       	ldi	r24, 0xA0	; 160
     772:	90 e4       	ldi	r25, 0x40	; 64
     774:	0e 94 02 0a 	call	0x1404	; 0x1404 <__divsf3>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e8       	ldi	r20, 0x80	; 128
     77e:	5f e3       	ldi	r21, 0x3F	; 63
     780:	0e 94 95 09 	call	0x132a	; 0x132a <__subsf3>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:99
        return r1 * buffer;
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e4       	ldi	r19, 0x40	; 64
     788:	4c e1       	ldi	r20, 0x1C	; 28
     78a:	56 e4       	ldi	r21, 0x46	; 70
     78c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__mulsf3>
     790:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__fixunssfsi>
     794:	e0 e3       	ldi	r30, 0x30	; 48
     796:	f1 e0       	ldi	r31, 0x01	; 1
getVirtualPin():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:104
    }

    altExtractIndex(uint8_t numLevels, uint16_t const levels[], uint16_t level) {
      uint8_t i;
      for (i = 0; i < numLevels - 1; i++) {
     798:	80 e0       	ldi	r24, 0x00	; 0
_ZN18LadderButtonConfig15altExtractIndexEhPKjj.isra.5():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:111
        // NOTE(brian): This will overflow a 16-bit ADC. If we need to support that,
        // a possible formula that avoids uint32_t instructions might be something
        // like:
        //    threshold = levels[i]/2 + levels[i+1]/2
        //        + (((levels[i] & 0x1) + (levels[i+1] & 0x1)) / 2)
        uint16_t threshold = (levels[i] + levels[i+1]) / 2;
     79a:	21 91       	ld	r18, Z+
     79c:	31 91       	ld	r19, Z+
     79e:	40 81       	ld	r20, Z
     7a0:	51 81       	ldd	r21, Z+1	; 0x01
     7a2:	24 0f       	add	r18, r20
     7a4:	35 1f       	adc	r19, r21
     7a6:	36 95       	lsr	r19
     7a8:	27 95       	ror	r18
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:113

        if (level < threshold) return i;
     7aa:	62 17       	cp	r22, r18
     7ac:	73 07       	cpc	r23, r19
     7ae:	18 f0       	brcs	.+6      	; 0x7b6 <LadderButtonConfig::getVirtualPin() const+0x78>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:104
        return r1 * buffer;
    }

    altExtractIndex(uint8_t numLevels, uint16_t const levels[], uint16_t level) {
      uint8_t i;
      for (i = 0; i < numLevels - 1; i++) {
     7b0:	8f 5f       	subi	r24, 0xFF	; 255
     7b2:	85 30       	cpi	r24, 0x05	; 5
     7b4:	91 f7       	brne	.-28     	; 0x79a <LadderButtonConfig::getVirtualPin() const+0x5c>
getVirtualPin():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:85
        // Serial.print(raw);
        // Serial.print(F("; AdjLevel: "));
        // Serial.println(R2);

        return altExtractIndex(NUM_LEVELS, LEVELS, level);
    }
     7b6:	08 95       	ret

000007b8 <ace_button::ButtonConfig::getClock()>:
millis():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     7b8:	2f b7       	in	r18, 0x3f	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     7ba:	f8 94       	cli
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     7bc:	60 91 62 02 	lds	r22, 0x0262	; 0x800262 <timer0_millis>
     7c0:	70 91 63 02 	lds	r23, 0x0263	; 0x800263 <timer0_millis+0x1>
     7c4:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timer0_millis+0x2>
     7c8:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timer0_millis+0x3>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     7cc:	2f bf       	out	0x3f, r18	; 63
getClock():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:307
     * uint16_t because that's the return type of millis().
     *
     * Note: This should have been a const function. I cannot change it now
     * without breaking backwards compatibility.
     */
    virtual unsigned long getClock() { return millis(); }
     7ce:	08 95       	ret

000007d0 <SPIClass::transfer(unsigned char)>:
transfer():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.h:212
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     7d0:	8e bd       	out	0x2e, r24	; 46
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.h:219
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     7d2:	00 00       	nop
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.h:220
    while (!(SPSR & _BV(SPIF))) ; // wait
     7d4:	0d b4       	in	r0, 0x2d	; 45
     7d6:	07 fe       	sbrs	r0, 7
     7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <SPIClass::transfer(unsigned char)+0x4>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.h:221
    return SPDR;
     7da:	8e b5       	in	r24, 0x2e	; 46
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.h:222
  }
     7dc:	08 95       	ret

000007de <Print::write(char const*) [clone .part.2] [clone .constprop.21]>:
_ZN5Print5writeEPKc.part.2():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.h:54
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     7de:	fc 01       	movw	r30, r24
     7e0:	01 90       	ld	r0, Z+
     7e2:	00 20       	and	r0, r0
     7e4:	e9 f7       	brne	.-6      	; 0x7e0 <Print::write(char const*) [clone .part.2] [clone .constprop.21]+0x2>
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	af 01       	movw	r20, r30
     7ea:	48 1b       	sub	r20, r24
     7ec:	59 0b       	sbc	r21, r25
     7ee:	bc 01       	movw	r22, r24
     7f0:	8a e6       	ldi	r24, 0x6A	; 106
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <Print::write(unsigned char const*, unsigned int)>

000007f8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>:
printNumber():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	cf 93       	push	r28
     806:	df 93       	push	r29
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	a1 97       	sbiw	r28, 0x21	; 33
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	de bf       	out	0x3e, r29	; 62
     814:	0f be       	out	0x3f, r0	; 63
     816:	cd bf       	out	0x3d, r28	; 61
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     818:	19 a2       	std	Y+33, r1	; 0x21
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     81a:	42 30       	cpi	r20, 0x02	; 2
     81c:	08 f4       	brcc	.+2      	; 0x820 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]+0x28>
     81e:	4a e0       	ldi	r20, 0x0A	; 10
     820:	8e 01       	movw	r16, r28
     822:	0f 5d       	subi	r16, 0xDF	; 223
     824:	1f 4f       	sbci	r17, 0xFF	; 255
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
     826:	84 2e       	mov	r8, r20
     828:	91 2c       	mov	r9, r1
     82a:	b1 2c       	mov	r11, r1
     82c:	a1 2c       	mov	r10, r1
     82e:	a5 01       	movw	r20, r10
     830:	94 01       	movw	r18, r8
     832:	0e 94 9e 0b 	call	0x173c	; 0x173c <__udivmodsi4>
     836:	e6 2f       	mov	r30, r22
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
     838:	b9 01       	movw	r22, r18
     83a:	ca 01       	movw	r24, r20
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     83c:	ea 30       	cpi	r30, 0x0A	; 10
     83e:	f4 f4       	brge	.+60     	; 0x87c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]+0x84>
     840:	e0 5d       	subi	r30, 0xD0	; 208
     842:	d8 01       	movw	r26, r16
     844:	ee 93       	st	-X, r30
     846:	8d 01       	movw	r16, r26
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
     848:	23 2b       	or	r18, r19
     84a:	24 2b       	or	r18, r20
     84c:	25 2b       	or	r18, r21
     84e:	79 f7       	brne	.-34     	; 0x82e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]+0x36>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
write():
     854:	10 97       	sbiw	r26, 0x00	; 0
     856:	19 f0       	breq	.+6      	; 0x85e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]+0x66>
     858:	cd 01       	movw	r24, r26
     85a:	0e 94 ef 03 	call	0x7de	; 0x7de <Print::write(char const*) [clone .part.2] [clone .constprop.21]>
printNumber():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
     85e:	a1 96       	adiw	r28, 0x21	; 33
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	bf 90       	pop	r11
     874:	af 90       	pop	r10
     876:	9f 90       	pop	r9
     878:	8f 90       	pop	r8
     87a:	08 95       	ret
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     87c:	e9 5c       	subi	r30, 0xC9	; 201
     87e:	e1 cf       	rjmp	.-62     	; 0x842 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]+0x4a>

00000880 <Print::println(char const*) [clone .constprop.18]>:
println():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:138
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
write():
     884:	0e 94 ef 03 	call	0x7de	; 0x7de <Print::write(char const*) [clone .part.2] [clone .constprop.21]>
     888:	ec 01       	movw	r28, r24
     88a:	8c e3       	ldi	r24, 0x3C	; 60
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 ef 03 	call	0x7de	; 0x7de <Print::write(char const*) [clone .part.2] [clone .constprop.21]>
println():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:143
{
  size_t n = print(c);
  n += println();
  return n;
}
     892:	8c 0f       	add	r24, r28
     894:	9d 1f       	adc	r25, r29
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <wrTip(int, int) [clone .constprop.17]>:
wrTip():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:127

//-----------------------------------------------------------------------------
// Digipot wiper functions
//-----------------------------------------------------------------------------

void wrTip(int digiValue, int delayMs) {
     89c:	cf 93       	push	r28
     89e:	c8 2f       	mov	r28, r24
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:128
  digitalWrite(digipotWiperPin, LOW);
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	8a e0       	ldi	r24, 0x0A	; 10
     8a4:	0e 94 1f 01 	call	0x23e	; 0x23e <digitalWrite>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:129
  SPI.transfer(digipotWiperTip);
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:130
  SPI.transfer(digiValue);
     8ae:	8c 2f       	mov	r24, r28
     8b0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:131
  Serial.println(" Button Press");
     8b4:	8f e3       	ldi	r24, 0x3F	; 63
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:132
  delay(delayMs);
     8bc:	62 e3       	ldi	r22, 0x32	; 50
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 bb 01 	call	0x376	; 0x376 <delay>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:133
  SPI.transfer(digipotWiperTip);
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:134
  SPI.transfer(digipotDefaultValue);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:135
  Serial.println(" Button Release TIP");
     8d4:	8d e4       	ldi	r24, 0x4D	; 77
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:136
  digitalWrite(digipotWiperPin, HIGH);
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	8a e0       	ldi	r24, 0x0A	; 10
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:137
}
     8e0:	cf 91       	pop	r28
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:136
  Serial.println(" Button Press");
  delay(delayMs);
  SPI.transfer(digipotWiperTip);
  SPI.transfer(digipotDefaultValue);
  Serial.println(" Button Release TIP");
  digitalWrite(digipotWiperPin, HIGH);
     8e2:	0c 94 1f 01 	jmp	0x23e	; 0x23e <digitalWrite>

000008e6 <wrTipRelease()>:
wrTipRelease():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:148
  Serial.println(" Hold TIP");
  digitalWrite(digipotWiperPin, HIGH);
}

void wrTipRelease() {
  digitalWrite(digipotWiperPin, LOW);
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	8a e0       	ldi	r24, 0x0A	; 10
     8ea:	0e 94 1f 01 	call	0x23e	; 0x23e <digitalWrite>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:149
  SPI.transfer(digipotWiperTip);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:150
  SPI.transfer(digipotDefaultValue);
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:151
  Serial.println(" Button Release TIP");
     8fa:	8d e4       	ldi	r24, 0x4D	; 77
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:152
  digitalWrite(digipotWiperPin, HIGH);
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	8a e0       	ldi	r24, 0x0A	; 10
     906:	0c 94 1f 01 	jmp	0x23e	; 0x23e <digitalWrite>

0000090a <wrTipHold(int)>:
wrTipHold():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:139
  SPI.transfer(digipotDefaultValue);
  Serial.println(" Button Release TIP");
  digitalWrite(digipotWiperPin, HIGH);
}

void wrTipHold(int digiValue) {
     90a:	cf 93       	push	r28
     90c:	c8 2f       	mov	r28, r24
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:140
  digitalWrite(digipotWiperPin, LOW);
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	8a e0       	ldi	r24, 0x0A	; 10
     912:	0e 94 1f 01 	call	0x23e	; 0x23e <digitalWrite>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:141
  SPI.transfer(digipotWiperTip);
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:142
  SPI.transfer(digiValue);
     91c:	8c 2f       	mov	r24, r28
     91e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:143
  Serial.println(" Hold TIP");
     922:	81 e6       	ldi	r24, 0x61	; 97
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:144
  digitalWrite(digipotWiperPin, HIGH);
     92a:	61 e0       	ldi	r22, 0x01	; 1
     92c:	8a e0       	ldi	r24, 0x0A	; 10
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:145
}
     92e:	cf 91       	pop	r28
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:144
void wrTipHold(int digiValue) {
  digitalWrite(digipotWiperPin, LOW);
  SPI.transfer(digipotWiperTip);
  SPI.transfer(digiValue);
  Serial.println(" Hold TIP");
  digitalWrite(digipotWiperPin, HIGH);
     930:	0c 94 1f 01 	jmp	0x23e	; 0x23e <digitalWrite>

00000934 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)>:
handleEvent():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:184
static LadderButtonConfig buttonConfig(
  SWC_ANALOG_PIN, NUM_LEVELS, LEVELS, NUM_BUTTONS, BUTTONS
);

// The event handler for the buttons.
void handleEvent(AceButton* button, uint8_t eventType, uint8_t buttonState) {
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	8c 01       	movw	r16, r24
     93e:	c6 2f       	mov	r28, r22
     940:	d4 2f       	mov	r29, r20
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:187

  // Print out a message for all events.
  Serial.print(F("handleEvent(): "));
     942:	85 e0       	ldi	r24, 0x05	; 5
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Print::print(__FlashStringHelper const*) [clone .constprop.11]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:188
  Serial.print(F("virtualPin: "));
     94a:	88 ef       	ldi	r24, 0xF8	; 248
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Print::print(__FlashStringHelper const*) [clone .constprop.11]>
print():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     952:	f8 01       	movw	r30, r16
     954:	62 81       	ldd	r22, Z+2	; 0x02
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     95c:	4a e0       	ldi	r20, 0x0A	; 10
     95e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
handleEvent():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:190
  Serial.print(button->getPin());
  Serial.print(F("; eventType: "));
     962:	8a ee       	ldi	r24, 0xEA	; 234
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Print::print(__FlashStringHelper const*) [clone .constprop.11]>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:81
  sEventHeartBeat,
};

__FlashStringHelper* AceButton::eventName(uint8_t event) {
  const char* name = (event >= sizeof(sEventNames) / sizeof(const char*))
      ? sEventUnknown
     96a:	80 ed       	ldi	r24, 0xD0	; 208
     96c:	90 e0       	ldi	r25, 0x00	; 0
eventName():
     96e:	c8 30       	cpi	r28, 0x08	; 8
     970:	40 f4       	brcc	.+16     	; 0x982 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x4e>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:82
      : (const char*) pgm_read_ptr(sEventNames + event);
     972:	ec 2f       	mov	r30, r28
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	e0 54       	subi	r30, 0x40	; 64
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	85 91       	lpm	r24, Z+
     980:	94 91       	lpm	r25, Z
handleEvent():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:191
  Serial.print(AceButton::eventName(eventType));
     982:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Print::print(__FlashStringHelper const*) [clone .constprop.11]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:192
  Serial.print(F("; buttonState: "));
     986:	8a ed       	ldi	r24, 0xDA	; 218
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Print::print(__FlashStringHelper const*) [clone .constprop.11]>
print():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     98e:	6d 2f       	mov	r22, r29
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	80 e0       	ldi	r24, 0x00	; 0
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     996:	4a e0       	ldi	r20, 0x0A	; 10
     998:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
write():
     99c:	8c e3       	ldi	r24, 0x3C	; 60
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 ef 03 	call	0x7de	; 0x7de <Print::write(char const*) [clone .part.2] [clone .constprop.21]>
handleEvent():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:195
  Serial.println(buttonState);

  switch (button->getPin()) {
     9a4:	f8 01       	movw	r30, r16
     9a6:	82 81       	ldd	r24, Z+2	; 0x02
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	09 f4       	brne	.+2      	; 0x9ae <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x7a>
     9ac:	58 c0       	rjmp	.+176    	; 0xa5e <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x12a>
     9ae:	48 f4       	brcc	.+18     	; 0x9c2 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x8e>
     9b0:	88 23       	and	r24, r24
     9b2:	a9 f0       	breq	.+42     	; 0x9de <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xaa>
     9b4:	81 30       	cpi	r24, 0x01	; 1
     9b6:	d9 f1       	breq	.+118    	; 0xa2e <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xfa>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:257
          Serial.println("Source (Release)");
          wrTipRelease();
      }
      break;
  }
}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	08 95       	ret
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:195
  Serial.print(F("; eventType: "));
  Serial.print(AceButton::eventName(eventType));
  Serial.print(F("; buttonState: "));
  Serial.println(buttonState);

  switch (button->getPin()) {
     9c2:	83 30       	cpi	r24, 0x03	; 3
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x94>
     9c6:	63 c0       	rjmp	.+198    	; 0xa8e <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x15a>
     9c8:	84 30       	cpi	r24, 0x04	; 4
     9ca:	b1 f7       	brne	.-20     	; 0x9b8 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x84>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:245
          Serial.println("Seek - (Release)");
          wrTipRelease();
      }
      break;
    case 4:
      if (eventType == AceButton::kEventPressed) {
     9cc:	c1 11       	cpse	r28, r1
     9ce:	77 c0       	rjmp	.+238    	; 0xabe <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x18a>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:246
          Serial.println("Source");
     9d0:	8f e2       	ldi	r24, 0x2F	; 47
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:247
          wrTip(2, 50); // 1.2kOhm
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	08 c0       	rjmp	.+16     	; 0x9ee <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xba>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:197
  Serial.print(F("; buttonState: "));
  Serial.println(buttonState);

  switch (button->getPin()) {
    case 0:
      if (eventType == AceButton::kEventPressed) {
     9de:	c1 11       	cpse	r28, r1
     9e0:	0c c0       	rjmp	.+24     	; 0x9fa <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xc6>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:198
        Serial.println("Volume - (Press)");
     9e2:	8b e6       	ldi	r24, 0x6B	; 107
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:199
        wrTip(55, 50); // 24kOhm
     9ea:	87 e3       	ldi	r24, 0x37	; 55
     9ec:	90 e0       	ldi	r25, 0x00	; 0
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:257
          Serial.println("Source (Release)");
          wrTipRelease();
      }
      break;
  }
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:211
      }
      break;
    case 1:
      if (eventType == AceButton::kEventPressed) {
        Serial.println("Volume + (Press)");
        wrTip(42, 50); // 16kOhm
     9f6:	0c 94 4e 04 	jmp	0x89c	; 0x89c <wrTip(int, int) [clone .constprop.17]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:200
  switch (button->getPin()) {
    case 0:
      if (eventType == AceButton::kEventPressed) {
        Serial.println("Volume - (Press)");
        wrTip(55, 50); // 24kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
     9fa:	c4 30       	cpi	r28, 0x04	; 4
     9fc:	61 f4       	brne	.+24     	; 0xa16 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xe2>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:201
        Serial.println("Volume - (Hold)");
     9fe:	8c e7       	ldi	r24, 0x7C	; 124
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:202
        wrTipHold(55); // 24kOhm
     a06:	87 e3       	ldi	r24, 0x37	; 55
     a08:	90 e0       	ldi	r25, 0x00	; 0
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:257
          Serial.println("Source (Release)");
          wrTipRelease();
      }
      break;
  }
}
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	1f 91       	pop	r17
     a10:	0f 91       	pop	r16
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:214
      if (eventType == AceButton::kEventPressed) {
        Serial.println("Volume + (Press)");
        wrTip(42, 50); // 16kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
        Serial.println("Volume + (Hold)");
        wrTipHold(42); // 16kOhm
     a12:	0c 94 85 04 	jmp	0x90a	; 0x90a <wrTipHold(int)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:204
        wrTip(55, 50); // 24kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
        Serial.println("Volume - (Hold)");
        wrTipHold(55); // 24kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
        Serial.println("Volume - (Release)");
     a16:	8c e8       	ldi	r24, 0x8C	; 140
     a18:	91 e0       	ldi	r25, 0x01	; 1
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:203
        Serial.println("Volume - (Press)");
        wrTip(55, 50); // 24kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
        Serial.println("Volume - (Hold)");
        wrTipHold(55); // 24kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
     a1a:	c1 30       	cpi	r28, 0x01	; 1
     a1c:	69 f6       	brne	.-102    	; 0x9b8 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x84>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:252
          wrTip(2, 50); // 1.2kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
          Serial.println("Source (Hold)");
          wrTipHold(2); // 1.2kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
          Serial.println("Source (Release)");
     a1e:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:257
          wrTipRelease();
      }
      break;
  }
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:253
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
          Serial.println("Source (Hold)");
          wrTipHold(2); // 1.2kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
          Serial.println("Source (Release)");
          wrTipRelease();
     a2a:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <wrTipRelease()>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:209
        Serial.println("Volume - (Release)");
        wrTipRelease();
      }
      break;
    case 1:
      if (eventType == AceButton::kEventPressed) {
     a2e:	c1 11       	cpse	r28, r1
     a30:	07 c0       	rjmp	.+14     	; 0xa40 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x10c>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:210
        Serial.println("Volume + (Press)");
     a32:	8f e9       	ldi	r24, 0x9F	; 159
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:211
        wrTip(42, 50); // 16kOhm
     a3a:	8a e2       	ldi	r24, 0x2A	; 42
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	d7 cf       	rjmp	.-82     	; 0x9ee <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xba>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:212
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
     a40:	c4 30       	cpi	r28, 0x04	; 4
     a42:	39 f4       	brne	.+14     	; 0xa52 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x11e>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:213
        Serial.println("Volume + (Hold)");
     a44:	80 eb       	ldi	r24, 0xB0	; 176
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:214
        wrTipHold(42); // 16kOhm
     a4c:	8a e2       	ldi	r24, 0x2A	; 42
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	dc cf       	rjmp	.-72     	; 0xa0a <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xd6>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:216
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
        Serial.println("Volume + (Release)");
     a52:	80 ec       	ldi	r24, 0xC0	; 192
     a54:	91 e0       	ldi	r25, 0x01	; 1
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:215
        Serial.println("Volume + (Press)");
        wrTip(42, 50); // 16kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
        Serial.println("Volume + (Hold)");
        wrTipHold(42); // 16kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
     a56:	c1 30       	cpi	r28, 0x01	; 1
     a58:	09 f0       	breq	.+2      	; 0xa5c <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x128>
     a5a:	ae cf       	rjmp	.-164    	; 0x9b8 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x84>
     a5c:	e0 cf       	rjmp	.-64     	; 0xa1e <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xea>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:221
        Serial.println("Volume + (Release)");
        wrTipRelease();
      }
      break;
    case 2:
      if (eventType == AceButton::kEventPressed) {
     a5e:	c1 11       	cpse	r28, r1
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x13c>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:222
          Serial.println("Seek + (Press)");
     a62:	83 ed       	ldi	r24, 0xD3	; 211
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:223
          wrTip(19, 50); // 8kOhm
     a6a:	83 e1       	ldi	r24, 0x13	; 19
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	bf cf       	rjmp	.-130    	; 0x9ee <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xba>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:224
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
     a70:	c4 30       	cpi	r28, 0x04	; 4
     a72:	39 f4       	brne	.+14     	; 0xa82 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x14e>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:225
          Serial.println("Seek + (Hold)");
     a74:	82 ee       	ldi	r24, 0xE2	; 226
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:226
          wrTipHold(19); // 8kOhm
     a7c:	83 e1       	ldi	r24, 0x13	; 19
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	c4 cf       	rjmp	.-120    	; 0xa0a <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xd6>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:228
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
          Serial.println("Seek + (Release)");
     a82:	80 ef       	ldi	r24, 0xF0	; 240
     a84:	91 e0       	ldi	r25, 0x01	; 1
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:227
          Serial.println("Seek + (Press)");
          wrTip(19, 50); // 8kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
          Serial.println("Seek + (Hold)");
          wrTipHold(19); // 8kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
     a86:	c1 30       	cpi	r28, 0x01	; 1
     a88:	09 f0       	breq	.+2      	; 0xa8c <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x158>
     a8a:	96 cf       	rjmp	.-212    	; 0x9b8 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x84>
     a8c:	c8 cf       	rjmp	.-112    	; 0xa1e <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xea>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:233
          Serial.println("Seek + (Release)");
          wrTipRelease();
      }
      break;
    case 3:
      if (eventType == AceButton::kEventPressed) {
     a8e:	c1 11       	cpse	r28, r1
     a90:	07 c0       	rjmp	.+14     	; 0xaa0 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x16c>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:234
          Serial.println("Seek - (Press)");
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:235
          wrTip(27, 50); // 11,25kOhm
     a9a:	8b e1       	ldi	r24, 0x1B	; 27
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a7 cf       	rjmp	.-178    	; 0x9ee <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xba>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:236
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
     aa0:	c4 30       	cpi	r28, 0x04	; 4
     aa2:	39 f4       	brne	.+14     	; 0xab2 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x17e>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:237
          Serial.println("Seek - (Hold)");
     aa4:	80 e1       	ldi	r24, 0x10	; 16
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:238
          wrTipHold(27); // 11,25kOhm
     aac:	8b e1       	ldi	r24, 0x1B	; 27
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	ac cf       	rjmp	.-168    	; 0xa0a <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xd6>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:240
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
          Serial.println("Seek - (Release)");
     ab2:	8e e1       	ldi	r24, 0x1E	; 30
     ab4:	92 e0       	ldi	r25, 0x02	; 2
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:239
          Serial.println("Seek - (Press)");
          wrTip(27, 50); // 11,25kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
          Serial.println("Seek - (Hold)");
          wrTipHold(27); // 11,25kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
     ab6:	c1 30       	cpi	r28, 0x01	; 1
     ab8:	09 f0       	breq	.+2      	; 0xabc <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x188>
     aba:	7e cf       	rjmp	.-260    	; 0x9b8 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x84>
     abc:	b0 cf       	rjmp	.-160    	; 0xa1e <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xea>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:248
      break;
    case 4:
      if (eventType == AceButton::kEventPressed) {
          Serial.println("Source");
          wrTip(2, 50); // 1.2kOhm
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventLongPressed) {
     abe:	c4 30       	cpi	r28, 0x04	; 4
     ac0:	39 f4       	brne	.+14     	; 0xad0 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x19c>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:249
          Serial.println("Source (Hold)");
     ac2:	86 e3       	ldi	r24, 0x36	; 54
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 40 04 	call	0x880	; 0x880 <Print::println(char const*) [clone .constprop.18]>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:250
          wrTipHold(2); // 1.2kOhm
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	9d cf       	rjmp	.-198    	; 0xa0a <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xd6>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:251
      } else if (ALLOW_LONG_PRESS && eventType == AceButton::kEventReleased) {
     ad0:	c1 30       	cpi	r28, 0x01	; 1
     ad2:	09 f0       	breq	.+2      	; 0xad6 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x1a2>
     ad4:	71 cf       	rjmp	.-286    	; 0x9b8 <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0x84>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:252
          Serial.println("Source (Release)");
     ad6:	84 e4       	ldi	r24, 0x44	; 68
     ad8:	92 e0       	ldi	r25, 0x02	; 2
     ada:	a1 cf       	rjmp	.-190    	; 0xa1e <handleEvent(ace_button::AceButton*, unsigned char, unsigned char)+0xea>

00000adc <__vector_16>:
__vector_16():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     adc:	1f 92       	push	r1
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	0f 92       	push	r0
     ae4:	11 24       	eor	r1, r1
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	af 93       	push	r26
     af0:	bf 93       	push	r27
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
     af2:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <timer0_millis>
     af6:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <timer0_millis+0x1>
     afa:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <timer0_millis+0x2>
     afe:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <timer0_millis+0x3>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
     b02:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <timer0_fract>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
     b06:	26 e0       	ldi	r18, 0x06	; 6
     b08:	23 0f       	add	r18, r19
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
     b0a:	2d 37       	cpi	r18, 0x7D	; 125
     b0c:	68 f1       	brcs	.+90     	; 0xb68 <__vector_16+0x8c>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
     b0e:	29 e8       	ldi	r18, 0x89	; 137
     b10:	23 0f       	add	r18, r19
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
     b12:	03 96       	adiw	r24, 0x03	; 3
     b14:	a1 1d       	adc	r26, r1
     b16:	b1 1d       	adc	r27, r1
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
     b18:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <timer0_fract>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
     b1c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <timer0_millis>
     b20:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <timer0_millis+0x1>
     b24:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <timer0_millis+0x2>
     b28:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <timer0_millis+0x3>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
     b2c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <timer0_overflow_count>
     b30:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <timer0_overflow_count+0x1>
     b34:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <timer0_overflow_count+0x2>
     b38:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <timer0_overflow_count+0x3>
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	a1 1d       	adc	r26, r1
     b40:	b1 1d       	adc	r27, r1
     b42:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <timer0_overflow_count>
     b46:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <timer0_overflow_count+0x1>
     b4a:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <timer0_overflow_count+0x2>
     b4e:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <timer0_overflow_count+0x3>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:213
#endif
}
     b52:	bf 91       	pop	r27
     b54:	af 91       	pop	r26
     b56:	9f 91       	pop	r25
     b58:	8f 91       	pop	r24
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
     b68:	02 96       	adiw	r24, 0x02	; 2
     b6a:	a1 1d       	adc	r26, r1
     b6c:	b1 1d       	adc	r27, r1
     b6e:	d4 cf       	rjmp	.-88     	; 0xb18 <__vector_16+0x3c>

00000b70 <__vector_19>:
__vector_19():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     b70:	1f 92       	push	r1
     b72:	0f 92       	push	r0
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	2f 93       	push	r18
     b7c:	3f 93       	push	r19
     b7e:	4f 93       	push	r20
     b80:	5f 93       	push	r21
     b82:	6f 93       	push	r22
     b84:	7f 93       	push	r23
     b86:	8f 93       	push	r24
     b88:	9f 93       	push	r25
     b8a:	af 93       	push	r26
     b8c:	bf 93       	push	r27
     b8e:	ef 93       	push	r30
     b90:	ff 93       	push	r31
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     b92:	8a e6       	ldi	r24, 0x6A	; 106
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <HardwareSerial::_tx_udr_empty_irq()>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
     b9a:	ff 91       	pop	r31
     b9c:	ef 91       	pop	r30
     b9e:	bf 91       	pop	r27
     ba0:	af 91       	pop	r26
     ba2:	9f 91       	pop	r25
     ba4:	8f 91       	pop	r24
     ba6:	7f 91       	pop	r23
     ba8:	6f 91       	pop	r22
     baa:	5f 91       	pop	r21
     bac:	4f 91       	pop	r20
     bae:	3f 91       	pop	r19
     bb0:	2f 91       	pop	r18
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <__vector_18>:
__vector_18():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	2f 93       	push	r18
     bc8:	8f 93       	push	r24
     bca:	9f 93       	push	r25
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
_rx_complete_irq():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     bd0:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <Serial+0x10>
     bd4:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <Serial+0x11>
     bd8:	80 81       	ld	r24, Z
     bda:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <Serial+0x16>
     bde:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <Serial+0x17>
     be2:	82 fd       	sbrc	r24, 2
     be4:	1b c0       	rjmp	.+54     	; 0xc1c <__vector_18+0x60>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     be6:	90 81       	ld	r25, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     be8:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <Serial+0x19>
     bec:	8f 5f       	subi	r24, 0xFF	; 255
     bee:	8f 73       	andi	r24, 0x3F	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     bf0:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <Serial+0x1a>
     bf4:	82 17       	cp	r24, r18
     bf6:	41 f0       	breq	.+16     	; 0xc08 <__vector_18+0x4c>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
     bf8:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <Serial+0x19>
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	e6 59       	subi	r30, 0x96	; 150
     c00:	fd 4f       	sbci	r31, 0xFD	; 253
     c02:	95 8f       	std	Z+29, r25	; 0x1d
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
     c04:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <Serial+0x19>
__vector_18():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	2f 91       	pop	r18
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	0f 90       	pop	r0
     c18:	1f 90       	pop	r1
     c1a:	18 95       	reti
_rx_complete_irq():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     c1c:	80 81       	ld	r24, Z
     c1e:	f4 cf       	rjmp	.-24     	; 0xc08 <__vector_18+0x4c>

00000c20 <global constructors keyed to 65535_0_arduino_swc_ford_fusion.ino.cpp.o.2219>:
_GLOBAL__I_65535_0_arduino_swc_ford_fusion.ino.cpp.o.2219():
     c20:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <Serial+0x3>
     c24:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <Serial+0x2>
     c28:	88 ee       	ldi	r24, 0xE8	; 232
     c2a:	93 e0       	ldi	r25, 0x03	; 3
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <Serial+0x4>
     c34:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <Serial+0x5>
     c38:	a0 93 70 02 	sts	0x0270, r26	; 0x800270 <Serial+0x6>
     c3c:	b0 93 71 02 	sts	0x0271, r27	; 0x800271 <Serial+0x7>
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <Serial+0x1>
     c48:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <Serial>
     c4c:	85 ec       	ldi	r24, 0xC5	; 197
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Serial+0xd>
     c54:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Serial+0xc>
     c58:	84 ec       	ldi	r24, 0xC4	; 196
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <Serial+0xf>
     c60:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <Serial+0xe>
     c64:	80 ec       	ldi	r24, 0xC0	; 192
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <Serial+0x11>
     c6c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <Serial+0x10>
     c70:	81 ec       	ldi	r24, 0xC1	; 193
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <Serial+0x13>
     c78:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <Serial+0x12>
     c7c:	82 ec       	ldi	r24, 0xC2	; 194
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <Serial+0x15>
     c84:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <Serial+0x14>
     c88:	86 ec       	ldi	r24, 0xC6	; 198
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <Serial+0x17>
     c90:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <Serial+0x16>
     c94:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <Serial+0x19>
     c98:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <Serial+0x1a>
     c9c:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <Serial+0x1b>
     ca0:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <Serial+0x1c>
     ca4:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <b0+0x1>
     ca8:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <b0>
     cac:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <b0+0x2>
     cb0:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <b0+0x3>
     cb4:	2f e7       	ldi	r18, 0x7F	; 127
     cb6:	20 93 6d 03 	sts	0x036D, r18	; 0x80036d <b0+0x6>
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <b0+0x5>
     cc2:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <b0+0x4>
     cc6:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <b1+0x1>
     cca:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <b1>
     cce:	31 e0       	ldi	r19, 0x01	; 1
     cd0:	30 93 58 03 	sts	0x0358, r19	; 0x800358 <b1+0x2>
     cd4:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <b1+0x3>
     cd8:	20 93 5c 03 	sts	0x035C, r18	; 0x80035c <b1+0x6>
     cdc:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <b1+0x5>
     ce0:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <b1+0x4>
     ce4:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <b2+0x1>
     ce8:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <b2>
     cec:	32 e0       	ldi	r19, 0x02	; 2
     cee:	30 93 47 03 	sts	0x0347, r19	; 0x800347 <b2+0x2>
     cf2:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <b2+0x3>
     cf6:	20 93 4b 03 	sts	0x034B, r18	; 0x80034b <b2+0x6>
     cfa:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <b2+0x5>
     cfe:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <b2+0x4>
     d02:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <b3+0x1>
     d06:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <b3>
     d0a:	33 e0       	ldi	r19, 0x03	; 3
     d0c:	30 93 36 03 	sts	0x0336, r19	; 0x800336 <b3+0x2>
     d10:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <b3+0x3>
     d14:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <b3+0x6>
     d18:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <b3+0x5>
     d1c:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <b3+0x4>
     d20:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <b4+0x1>
     d24:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <b4>
     d28:	34 e0       	ldi	r19, 0x04	; 4
     d2a:	30 93 25 03 	sts	0x0325, r19	; 0x800325 <b4+0x2>
     d2e:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <b4+0x3>
     d32:	20 93 29 03 	sts	0x0329, r18	; 0x800329 <b4+0x6>
     d36:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <b4+0x5>
     d3a:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <b4+0x4>
     d3e:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <buttonConfig+0x3>
     d42:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <buttonConfig+0x2>
     d46:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <buttonConfig+0x5>
     d4a:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <buttonConfig+0x4>
     d4e:	84 e1       	ldi	r24, 0x14	; 20
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <buttonConfig+0x7>
     d56:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <buttonConfig+0x6>
     d5a:	88 ec       	ldi	r24, 0xC8	; 200
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <buttonConfig+0x9>
     d62:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <buttonConfig+0x8>
     d66:	20 e9       	ldi	r18, 0x90	; 144
     d68:	31 e0       	ldi	r19, 0x01	; 1
     d6a:	30 93 12 03 	sts	0x0312, r19	; 0x800312 <buttonConfig+0xb>
     d6e:	20 93 11 03 	sts	0x0311, r18	; 0x800311 <buttonConfig+0xa>
     d72:	28 ee       	ldi	r18, 0xE8	; 232
     d74:	33 e0       	ldi	r19, 0x03	; 3
     d76:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <buttonConfig+0xd>
     d7a:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <buttonConfig+0xc>
     d7e:	30 93 16 03 	sts	0x0316, r19	; 0x800316 <buttonConfig+0xf>
     d82:	20 93 15 03 	sts	0x0315, r18	; 0x800315 <buttonConfig+0xe>
     d86:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <buttonConfig+0x11>
     d8a:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <buttonConfig+0x10>
     d8e:	88 e8       	ldi	r24, 0x88	; 136
     d90:	93 e1       	ldi	r25, 0x13	; 19
     d92:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <buttonConfig+0x13>
     d96:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <buttonConfig+0x12>
     d9a:	8e e0       	ldi	r24, 0x0E	; 14
     d9c:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <buttonConfig+0x14>
     da0:	86 e0       	ldi	r24, 0x06	; 6
     da2:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <buttonConfig+0x15>
     da6:	85 e0       	ldi	r24, 0x05	; 5
     da8:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <buttonConfig+0x16>
     dac:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <buttonConfig+0x17>
     db0:	80 e3       	ldi	r24, 0x30	; 48
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <buttonConfig+0x19>
     db8:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <buttonConfig+0x18>
     dbc:	86 e2       	ldi	r24, 0x26	; 38
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <buttonConfig+0x1b>
     dc4:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <buttonConfig+0x1a>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	27 e0       	ldi	r18, 0x07	; 7
     dcc:	33 e0       	ldi	r19, 0x03	; 3
     dce:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <buttonConfig+0x16>
     dd2:	89 17       	cp	r24, r25
     dd4:	68 f4       	brcc	.+26     	; 0xdf0 <global constructors keyed to 65535_0_arduino_swc_ford_fusion.ino.cpp.o.2219+0x1d0>
     dd6:	e8 2f       	mov	r30, r24
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	ea 5d       	subi	r30, 0xDA	; 218
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	01 90       	ld	r0, Z+
     de4:	f0 81       	ld	r31, Z
     de6:	e0 2d       	mov	r30, r0
     de8:	31 83       	std	Z+1, r19	; 0x01
     dea:	20 83       	st	Z, r18
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	ef cf       	rjmp	.-34     	; 0xdce <global constructors keyed to 65535_0_arduino_swc_ford_fusion.ino.cpp.o.2219+0x1ae>
     df0:	80 e2       	ldi	r24, 0x20	; 32
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <buttonConfig+0x1>
     df8:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <buttonConfig>
     dfc:	08 95       	ret

00000dfe <main>:
init():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
     dfe:	78 94       	sei
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
     e00:	84 b5       	in	r24, 0x24	; 36
     e02:	83 60       	ori	r24, 0x03	; 3
     e04:	84 bd       	out	0x24, r24	; 36
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
     e06:	85 b5       	in	r24, 0x25	; 37
     e08:	83 60       	ori	r24, 0x03	; 3
     e0a:	85 bd       	out	0x25, r24	; 37
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
     e0c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
     e10:	81 60       	ori	r24, 0x01	; 1
     e12:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
     e16:	c2 e0       	ldi	r28, 0x02	; 2
     e18:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
     e1c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
     e26:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     e2a:	81 60       	ori	r24, 0x01	; 1
     e2c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
     e30:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     e34:	84 60       	ori	r24, 0x04	; 4
     e36:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
     e3a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     e3e:	81 60       	ori	r24, 0x01	; 1
     e40:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
     e44:	86 e8       	ldi	r24, 0x86	; 134
     e46:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
     e4a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
setup():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:280
}

//-----------------------------------------------------------------------------

void setup() {
  delay(1000); // some microcontrollers reboot twice
     e4e:	68 ee       	ldi	r22, 0xE8	; 232
     e50:	73 e0       	ldi	r23, 0x03	; 3
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 bb 01 	call	0x376	; 0x376 <delay>
begin():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     e5a:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <Serial+0x10>
     e5e:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <Serial+0x11>
     e62:	c0 83       	st	Z, r28
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     e64:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <Serial+0xc>
     e68:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <Serial+0xd>
     e6c:	10 82       	st	Z, r1
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     e6e:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <Serial+0xe>
     e72:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <Serial+0xf>
     e76:	88 e0       	ldi	r24, 0x08	; 8
     e78:	80 83       	st	Z, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
     e7a:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <Serial+0x18>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     e7e:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <Serial+0x14>
     e82:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <Serial+0x15>
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	80 83       	st	Z, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
     e8a:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <Serial+0x12>
     e8e:	f0 91 7d 02 	lds	r31, 0x027D	; 0x80027d <Serial+0x13>
     e92:	80 81       	ld	r24, Z
     e94:	88 69       	ori	r24, 0x98	; 152
     e96:	80 83       	st	Z, r24
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
     e98:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <Serial+0x12>
     e9c:	f0 91 7d 02 	lds	r31, 0x027D	; 0x80027d <Serial+0x13>
     ea0:	80 81       	ld	r24, Z
     ea2:	8f 7d       	andi	r24, 0xDF	; 223
     ea4:	80 83       	st	Z, r24
println():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:116
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
     ea6:	8e e2       	ldi	r24, 0x2E	; 46
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Print::print(__FlashStringHelper const*) [clone .constprop.11]>
write():
     eae:	8c e3       	ldi	r24, 0x3C	; 60
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	0e 94 ef 03 	call	0x7de	; 0x7de <Print::write(char const*) [clone .part.2] [clone .constprop.21]>
setup():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:287
  while (! Serial); // Wait until Serial is ready - Leonardo/Micro
  Serial.println(F("setup(): begin"));

  // Don't use internal pull-up resistor because it will change the effective
  // resistance of the resistor ladder.
  pinMode(SWC_ANALOG_PIN, INPUT);
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	8e e0       	ldi	r24, 0x0E	; 14
     eba:	0e 94 4d 01 	call	0x29a	; 0x29a <pinMode>
_ZN10ace_button12ButtonConfig15setEventHandlerEPFvPNS_9AceButtonEhhE():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:391
    /**
     * Install the EventHandler function pointer. The event handler must be
     * defined for the AceButton to be useful.
     */
    void setEventHandler(EventHandler eventHandler) {
      mEventHandler = reinterpret_cast<void*>(eventHandler);
     ebe:	8a e9       	ldi	r24, 0x9A	; 154
     ec0:	94 e0       	ldi	r25, 0x04	; 4
     ec2:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <buttonConfig+0x3>
     ec6:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <buttonConfig+0x2>
_ZN10ace_button12ButtonConfig12clearFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:336
      mFeatureFlags |= features;
    }

    /** Disable the given features. */
    void clearFeature(FeatureFlagType features) {
      mFeatureFlags &= ~features;
     eca:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <buttonConfig+0x4>
     ece:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <buttonConfig+0x5>
     ed2:	9f 77       	andi	r25, 0x7F	; 127
_ZN10ace_button12ButtonConfig10setFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:331
      return mFeatureFlags & features;
    }

    /** Enable the given features. */
    void setFeature(FeatureFlagType features) {
      mFeatureFlags |= features;
     ed4:	85 60       	ori	r24, 0x05	; 5
     ed6:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <buttonConfig+0x5>
     eda:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <buttonConfig+0x4>
setup():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:298
  buttonConfig.setFeature(ButtonConfig::kFeatureLongPress);
  // buttonConfig.setFeature(ButtonConfig::kFeatureDoubleClick);
  // buttonConfig.setFeature(ButtonConfig::kFeatureRepeatPress);

  // Ready digitpot, set wiper to no button
  pinMode(digipotWiperPin, OUTPUT);
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	8a e0       	ldi	r24, 0x0A	; 10
     ee2:	0e 94 4d 01 	call	0x29a	; 0x29a <pinMode>
begin():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:28
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
  uint8_t sreg = SREG;
     ee6:	cf b7       	in	r28, 0x3f	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     ee8:	f8 94       	cli
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
     eea:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
     eee:	81 11       	cpse	r24, r1
     ef0:	27 c0       	rjmp	.+78     	; 0xf40 <main+0x142>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     ef2:	eb e5       	ldi	r30, 0x5B	; 91
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	84 91       	lpm	r24, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
     ef8:	e2 e7       	ldi	r30, 0x72	; 114
     efa:	f1 e0       	ldi	r31, 0x01	; 1
     efc:	94 91       	lpm	r25, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
     efe:	e8 2f       	mov	r30, r24
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	e3 5c       	subi	r30, 0xC3	; 195
     f08:	fe 4f       	sbci	r31, 0xFE	; 254
     f0a:	a5 91       	lpm	r26, Z+
     f0c:	b4 91       	lpm	r27, Z
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     f0e:	ec 91       	ld	r30, X
     f10:	e9 23       	and	r30, r25
     f12:	21 f4       	brne	.+8      	; 0xf1c <main+0x11e>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	8a e0       	ldi	r24, 0x0A	; 10
     f18:	0e 94 1f 01 	call	0x23e	; 0x23e <digitalWrite>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	8a e0       	ldi	r24, 0x0A	; 10
     f20:	0e 94 4d 01 	call	0x29a	; 0x29a <pinMode>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     f24:	8c b5       	in	r24, 0x2c	; 44
     f26:	80 61       	ori	r24, 0x10	; 16
     f28:	8c bd       	out	0x2c, r24	; 44
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
     f2a:	8c b5       	in	r24, 0x2c	; 44
     f2c:	80 64       	ori	r24, 0x40	; 64
     f2e:	8c bd       	out	0x2c, r24	; 44
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     f30:	61 e0       	ldi	r22, 0x01	; 1
     f32:	8d e0       	ldi	r24, 0x0D	; 13
     f34:	0e 94 4d 01 	call	0x29a	; 0x29a <pinMode>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	8b e0       	ldi	r24, 0x0B	; 11
     f3c:	0e 94 4d 01 	call	0x29a	; 0x29a <pinMode>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
     f40:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__data_end>
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
     f4a:	cf bf       	out	0x3f, r28	; 63
setup():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:300
  SPI.begin();
  digitalWrite(digipotWiperPin, LOW);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	8a e0       	ldi	r24, 0x0A	; 10
     f50:	0e 94 1f 01 	call	0x23e	; 0x23e <digitalWrite>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:301
  SPI.transfer(digipotWiperTip); // command
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:302
  SPI.transfer(digipotDefaultValue); // value
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:303
  SPI.transfer(digipotWiperRing); // command
     f60:	80 e1       	ldi	r24, 0x10	; 16
     f62:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:304
  SPI.transfer(255); // float the ring circuit
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPIClass::transfer(unsigned char)>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:305
  digitalWrite(digipotWiperPin, HIGH);
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	8a e0       	ldi	r24, 0x0A	; 10
     f70:	0e 94 1f 01 	call	0x23e	; 0x23e <digitalWrite>
println():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/Print.cpp:116
     f74:	8f e1       	ldi	r24, 0x1F	; 31
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Print::print(__FlashStringHelper const*) [clone .constprop.11]>
write():
     f7c:	8c e3       	ldi	r24, 0x3C	; 60
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 ef 03 	call	0x7de	; 0x7de <Print::write(char const*) [clone .part.2] [clone .constprop.21]>
checkButtons():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:266
// than 4-5 ms to avoid disconnecting the WiFi connection. See
// https://github.com/esp8266/Arduino/issues/1634 and
// https://github.com/esp8266/Arduino/issues/5083. To be safe, let's rate-limit
// this on all processors to about 200 samples/second.
void checkButtons() {
  static uint16_t prev = millis();
     f84:	88 24       	eor	r8, r8
     f86:	83 94       	inc	r8
serialEventRun():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f88:	e0 e0       	ldi	r30, 0x00	; 0
     f8a:	ae 2e       	mov	r10, r30
     f8c:	e0 e0       	ldi	r30, 0x00	; 0
     f8e:	be 2e       	mov	r11, r30
checkButtons():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:266
     f90:	99 24       	eor	r9, r9
     f92:	93 94       	inc	r9
     f94:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <guard variable for checkButtons()::prev>
     f98:	81 11       	cpse	r24, r1
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <main+0x1c0>
millis():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     f9c:	2f b7       	in	r18, 0x3f	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     f9e:	f8 94       	cli
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     fa0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <timer0_millis>
     fa4:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <timer0_millis+0x1>
     fa8:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <timer0_millis+0x2>
     fac:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <timer0_millis+0x3>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     fb0:	2f bf       	out	0x3f, r18	; 63
checkButtons():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:266
     fb2:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <checkButtons()::prev+0x1>
     fb6:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <checkButtons()::prev>
     fba:	90 92 59 02 	sts	0x0259, r9	; 0x800259 <guard variable for checkButtons()::prev>
millis():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     fbe:	2f b7       	in	r18, 0x3f	; 63
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     fc0:	f8 94       	cli
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     fc2:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <timer0_millis>
     fc6:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <timer0_millis+0x1>
     fca:	a0 91 64 02 	lds	r26, 0x0264	; 0x800264 <timer0_millis+0x2>
     fce:	b0 91 65 02 	lds	r27, 0x0265	; 0x800265 <timer0_millis+0x3>
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     fd2:	2f bf       	out	0x3f, r18	; 63
checkButtons():
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:271

  // DO NOT USE delay(5) to do this.
  // The (uint16_t) cast is required on 32-bit processors, harmless on 8-bit.
  uint16_t now = millis();
  if ((uint16_t) (now - prev) >= 5) {
     fd4:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <checkButtons()::prev>
     fd8:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <checkButtons()::prev+0x1>
     fdc:	ac 01       	movw	r20, r24
     fde:	42 1b       	sub	r20, r18
     fe0:	53 0b       	sbc	r21, r19
     fe2:	45 30       	cpi	r20, 0x05	; 5
     fe4:	51 05       	cpc	r21, r1
     fe6:	08 f4       	brcc	.+2      	; 0xfea <main+0x1ec>
     fe8:	94 c1       	rjmp	.+808    	; 0x1312 <main+0x514>
/Users/maxwlang/Projects/arduino-swc-ford-fusion/arduino-swc-ford-fusion.ino:272
    prev = now;
     fea:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <checkButtons()::prev+0x1>
     fee:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <checkButtons()::prev>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:59
}

void LadderButtonConfig::checkButtons() const {
  uint8_t virtualPin = getVirtualPin();
     ff2:	87 e0       	ldi	r24, 0x07	; 7
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 9f 03 	call	0x73e	; 0x73e <LadderButtonConfig::getVirtualPin() const>
     ffa:	08 2f       	mov	r16, r24
main():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:61

  for (uint8_t i = 0; i < mNumButtons; i++) {
     ffc:	10 e0       	ldi	r17, 0x00	; 0
checkButtons():
     ffe:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <buttonConfig+0x16>
    1002:	18 17       	cp	r17, r24
    1004:	08 f0       	brcs	.+2      	; 0x1008 <main+0x20a>
    1006:	85 c1       	rjmp	.+778    	; 0x1312 <main+0x514>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:62
    AceButton* button = mButtons[i];
    1008:	81 2f       	mov	r24, r17
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <buttonConfig+0x1a>
    1014:	f0 91 22 03 	lds	r31, 0x0322	; 0x800322 <buttonConfig+0x1b>
    1018:	e8 0f       	add	r30, r24
    101a:	f9 1f       	adc	r31, r25
    101c:	c0 81       	ld	r28, Z
    101e:	d1 81       	ldd	r29, Z+1	; 0x01
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:63
    if (button == nullptr) continue;
    1020:	20 97       	sbiw	r28, 0x00	; 0
    1022:	09 f4       	brne	.+2      	; 0x1026 <main+0x228>
    1024:	1d c1       	rjmp	.+570    	; 0x1260 <main+0x462>
    1026:	70 90 1e 03 	lds	r7, 0x031E	; 0x80031e <buttonConfig+0x17>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:68

    // For each button, call checkState() to allow it to figure out which
    // state it should move to.
    uint8_t buttonPin = button->getPin();
    uint8_t buttonState = (buttonPin == virtualPin)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	08 13       	cpse	r16, r24
    102e:	78 24       	eor	r7, r8
checkState():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:126
void AceButton::checkState(uint8_t buttonState) {
  // Retrieve the current time just once and use that in the various checkXxx()
  // functions below. This provides some robustness of the various timing
  // algorithms even if one of the event handlers takes more time than the
  // threshold time limits such as 'debounceDelay' or longPressDelay'.
  uint16_t now = mButtonConfig->getClock();
    1030:	88 81       	ld	r24, Y
    1032:	99 81       	ldd	r25, Y+1	; 0x01
    1034:	dc 01       	movw	r26, r24
    1036:	ed 91       	ld	r30, X+
    1038:	fc 91       	ld	r31, X
    103a:	01 90       	ld	r0, Z+
    103c:	f0 81       	ld	r31, Z
    103e:	e0 2d       	mov	r30, r0
    1040:	09 95       	icall
    1042:	6b 01       	movw	r12, r22
checkHeartBeat():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:420
    clearFlag(kFlagClickPostponed);
  }
}

void AceButton::checkHeartBeat(uint16_t now) {
  if (! mButtonConfig->isFeature(ButtonConfig::kFeatureHeartBeat)) return;
    1044:	e8 81       	ld	r30, Y
    1046:	f9 81       	ldd	r31, Y+1	; 0x01
_ZNK10ace_button12ButtonConfig9isFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:326
    // These methods provide access to various feature flags that control the
    // functionality of the AceButton.

    /** Check if the given features are enabled. */
    bool isFeature(FeatureFlagType features) const {
      return mFeatureFlags & features;
    1048:	84 81       	ldd	r24, Z+4	; 0x04
    104a:	95 81       	ldd	r25, Z+5	; 0x05
checkHeartBeat():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:420
    104c:	91 ff       	sbrs	r25, 1
    104e:	09 c0       	rjmp	.+18     	; 0x1062 <main+0x264>
    1050:	8c 81       	ldd	r24, Y+4	; 0x04
    1052:	9d 81       	ldd	r25, Y+5	; 0x05
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:423

  // On first call, set the last heart beat time.
  if (! isFlag(kFlagHeartRunning)) {
    1054:	90 fd       	sbrc	r25, 0
    1056:	eb c0       	rjmp	.+470    	; 0x122e <main+0x430>
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    bool isFlag(FlagType flag) const {
      return mFlags & flag;
    }

    void setFlag(FlagType flag) {
      mFlags |= flag;
    1058:	91 60       	ori	r25, 0x01	; 1
    105a:	9d 83       	std	Y+5, r25	; 0x05
    105c:	8c 83       	std	Y+4, r24	; 0x04
checkHeartBeat():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:435
  if (elapsedTime >= mButtonConfig->getHeartBeatInterval()) {
    // This causes the kEventHeartBeat to be sent with the last validated button
    // state, not the current button state. I think that makes more sense, but
    // there might be situations where it doesn't.
    handleEvent(kEventHeartBeat);
    mLastHeartBeatTime = now;
    105e:	d8 8a       	std	Y+16, r13	; 0x10
    1060:	cf 86       	std	Y+15, r12	; 0x0f
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	9d 81       	ldd	r25, Y+5	; 0x05
checkDebounced():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:172
    checkChanged(now, buttonState);
  }
}

bool AceButton::checkDebounced(uint16_t now, uint8_t buttonState) {
  if (isFlag(kFlagDebouncing)) {
    1066:	81 ff       	sbrs	r24, 1
    1068:	f2 c0       	rjmp	.+484    	; 0x124e <main+0x450>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:183
    // this expression into an uint16_t before doing the '>=' comparison below
    // for compatability with processors whose sizeof(int) == 4 instead of 2.
    // For those processors, the expression (now - mLastDebounceTime >=
    // getDebounceDelay()) won't work because the terms in the expression get
    // promoted to an (int).
    uint16_t elapsedTime = now - mLastDebounceTime;
    106a:	2f 81       	ldd	r18, Y+7	; 0x07
    106c:	38 85       	ldd	r19, Y+8	; 0x08
    106e:	a6 01       	movw	r20, r12
    1070:	42 1b       	sub	r20, r18
    1072:	53 0b       	sbc	r21, r19
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:188

    bool isDebouncingTimeOver =
        (elapsedTime >= mButtonConfig->getDebounceDelay());

    if (isDebouncingTimeOver) {
    1074:	e8 81       	ld	r30, Y
    1076:	f9 81       	ldd	r31, Y+1	; 0x01
    1078:	26 81       	ldd	r18, Z+6	; 0x06
    107a:	37 81       	ldd	r19, Z+7	; 0x07
    107c:	42 17       	cp	r20, r18
    107e:	53 07       	cpc	r21, r19
    1080:	08 f4       	brcc	.+2      	; 0x1084 <main+0x286>
    1082:	ee c0       	rjmp	.+476    	; 0x1260 <main+0x462>
_ZN10ace_button9AceButton9clearFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:388
    }

    void clearFlag(FlagType flag) {
      mFlags &= ~flag;
    1084:	8d 7f       	andi	r24, 0xFD	; 253
    1086:	9d 83       	std	Y+5, r25	; 0x05
    1088:	8c 83       	std	Y+4, r24	; 0x04
checkInitialized():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:210
    return false;
  }
}

bool AceButton::checkInitialized(uint16_t buttonState) {
  if (mLastButtonState != kButtonStateUnknown) {
    108a:	8e 81       	ldd	r24, Y+6	; 0x06
    108c:	8f 37       	cpi	r24, 0x7F	; 127
    108e:	09 f4       	brne	.+2      	; 0x1092 <main+0x294>
    1090:	3e c1       	rjmp	.+636    	; 0x130e <main+0x510>
checkEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:154
  // considered to be a DoubleClick. Therefore, we must clear the orphaned click
  // even if just the Clicked event is enabled.
  //
  // We also need to check of any postponed clicks that got generated when
  // kFeatureSuppressClickBeforeDoubleClick was enabled.
  if (mButtonConfig->isFeature(ButtonConfig::kFeatureClick) ||
    1092:	e8 81       	ld	r30, Y
    1094:	f9 81       	ldd	r31, Y+1	; 0x01
    1096:	84 81       	ldd	r24, Z+4	; 0x04
    1098:	95 81       	ldd	r25, Z+5	; 0x05
    109a:	83 70       	andi	r24, 0x03	; 3
    109c:	99 27       	eor	r25, r25
    109e:	89 2b       	or	r24, r25
    10a0:	59 f1       	breq	.+86     	; 0x10f8 <main+0x2fa>
_ZNK10ace_button9AceButton6isFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:380
    static const FlagType kFlagRepeatPressed = 0x40; // mLastRepeatPressTime
    static const FlagType kFlagClickPostponed = 0x80;
    static const FlagType kFlagHeartRunning = 0x100; // mLastHeartBeatTime valid

    bool isFlag(FlagType flag) const {
      return mFlags & flag;
    10a2:	8c 81       	ldd	r24, Y+4	; 0x04
checkPostponedClick():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:413
}

void AceButton::checkPostponedClick(uint16_t now) {
  uint16_t postponedClickDelay = mButtonConfig->getDoubleClickDelay();
  uint16_t elapsedTime = now - mLastClickTime;
  if (isFlag(kFlagClickPostponed) && elapsedTime >= postponedClickDelay) {
    10a4:	87 ff       	sbrs	r24, 7
    10a6:	14 c0       	rjmp	.+40     	; 0x10d0 <main+0x2d2>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:412
  }
}

void AceButton::checkPostponedClick(uint16_t now) {
  uint16_t postponedClickDelay = mButtonConfig->getDoubleClickDelay();
  uint16_t elapsedTime = now - mLastClickTime;
    10a8:	89 85       	ldd	r24, Y+9	; 0x09
    10aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ac:	96 01       	movw	r18, r12
    10ae:	28 1b       	sub	r18, r24
    10b0:	39 0b       	sbc	r19, r25
    10b2:	c9 01       	movw	r24, r18
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:413
  if (isFlag(kFlagClickPostponed) && elapsedTime >= postponedClickDelay) {
    10b4:	22 85       	ldd	r18, Z+10	; 0x0a
    10b6:	33 85       	ldd	r19, Z+11	; 0x0b
    10b8:	82 17       	cp	r24, r18
    10ba:	93 07       	cpc	r25, r19
    10bc:	48 f0       	brcs	.+18     	; 0x10d0 <main+0x2d2>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:414
    handleEvent(kEventClicked);
    10be:	62 e0       	ldi	r22, 0x02	; 2
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ace_button::AceButton::handleEvent(unsigned char)>
_ZN10ace_button9AceButton9clearFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:388
    void setFlag(FlagType flag) {
      mFlags |= flag;
    }

    void clearFlag(FlagType flag) {
      mFlags &= ~flag;
    10c6:	8c 81       	ldd	r24, Y+4	; 0x04
    10c8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ca:	8f 77       	andi	r24, 0x7F	; 127
    10cc:	9d 83       	std	Y+5, r25	; 0x05
    10ce:	8c 83       	std	Y+4, r24	; 0x04
    10d0:	8c 81       	ldd	r24, Y+4	; 0x04
    10d2:	9d 81       	ldd	r25, Y+5	; 0x05
checkOrphanedClick():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:405
  // TripleClick has an independent delay time, or reuses the DoubleClick delay
  // time. But I'm not sure that I've thought through all the details.
  uint16_t orphanedClickDelay = mButtonConfig->getDoubleClickDelay();

  uint16_t elapsedTime = now - mLastClickTime;
  if (isFlag(kFlagClicked) && (elapsedTime >= orphanedClickDelay)) {
    10d4:	83 ff       	sbrs	r24, 3
    10d6:	10 c0       	rjmp	.+32     	; 0x10f8 <main+0x2fa>
    10d8:	e8 81       	ld	r30, Y
    10da:	f9 81       	ldd	r31, Y+1	; 0x01
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:404
  // (getDoubleClickDelay() + getTripleClickDelay()), depending on whether the
  // TripleClick has an independent delay time, or reuses the DoubleClick delay
  // time. But I'm not sure that I've thought through all the details.
  uint16_t orphanedClickDelay = mButtonConfig->getDoubleClickDelay();

  uint16_t elapsedTime = now - mLastClickTime;
    10dc:	29 85       	ldd	r18, Y+9	; 0x09
    10de:	3a 85       	ldd	r19, Y+10	; 0x0a
    10e0:	a6 01       	movw	r20, r12
    10e2:	42 1b       	sub	r20, r18
    10e4:	53 0b       	sbc	r21, r19
    10e6:	9a 01       	movw	r18, r20
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:405
  if (isFlag(kFlagClicked) && (elapsedTime >= orphanedClickDelay)) {
    10e8:	42 85       	ldd	r20, Z+10	; 0x0a
    10ea:	53 85       	ldd	r21, Z+11	; 0x0b
    10ec:	24 17       	cp	r18, r20
    10ee:	35 07       	cpc	r19, r21
    10f0:	18 f0       	brcs	.+6      	; 0x10f8 <main+0x2fa>
_ZN10ace_button9AceButton9clearFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:388
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	9d 83       	std	Y+5, r25	; 0x05
    10f6:	8c 83       	std	Y+4, r24	; 0x04
checkEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:160
      mButtonConfig->isFeature(ButtonConfig::kFeatureDoubleClick)) {
    checkPostponedClick(now);
    checkOrphanedClick(now);
  }

  if (mButtonConfig->isFeature(ButtonConfig::kFeatureLongPress)) {
    10f8:	e8 81       	ld	r30, Y
    10fa:	f9 81       	ldd	r31, Y+1	; 0x01
_ZNK10ace_button12ButtonConfig9isFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:326
    10fc:	84 81       	ldd	r24, Z+4	; 0x04
checkEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:160
    10fe:	82 ff       	sbrs	r24, 2
    1100:	1b c0       	rjmp	.+54     	; 0x1138 <main+0x33a>
getDefaultReleasedState():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:111
    mFlags &= ~kFlagDefaultReleasedState;
  }
}

uint8_t AceButton::getDefaultReleasedState() const {
  return (mFlags & kFlagDefaultReleasedState) ? HIGH : LOW;
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	28 2f       	mov	r18, r24
    1108:	21 70       	andi	r18, 0x01	; 1
checkLongPress():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:225
  mLastButtonState = buttonState;
  return false;
}

void AceButton::checkLongPress(uint16_t now, uint8_t buttonState) {
  if (buttonState == getDefaultReleasedState()) {
    110a:	72 16       	cp	r7, r18
    110c:	a9 f0       	breq	.+42     	; 0x1138 <main+0x33a>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:229
    return;
  }

  if (isFlag(kFlagPressed) && !isFlag(kFlagLongPressed)) {
    110e:	82 ff       	sbrs	r24, 2
    1110:	13 c0       	rjmp	.+38     	; 0x1138 <main+0x33a>
    1112:	85 fd       	sbrc	r24, 5
    1114:	11 c0       	rjmp	.+34     	; 0x1138 <main+0x33a>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:230
    uint16_t elapsedTime = now - mLastPressTime;
    1116:	2b 85       	ldd	r18, Y+11	; 0x0b
    1118:	3c 85       	ldd	r19, Y+12	; 0x0c
    111a:	a6 01       	movw	r20, r12
    111c:	42 1b       	sub	r20, r18
    111e:	53 0b       	sbc	r21, r19
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:231
    if (elapsedTime >= mButtonConfig->getLongPressDelay()) {
    1120:	24 85       	ldd	r18, Z+12	; 0x0c
    1122:	35 85       	ldd	r19, Z+13	; 0x0d
    1124:	42 17       	cp	r20, r18
    1126:	53 07       	cpc	r21, r19
    1128:	38 f0       	brcs	.+14     	; 0x1138 <main+0x33a>
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    bool isFlag(FlagType flag) const {
      return mFlags & flag;
    }

    void setFlag(FlagType flag) {
      mFlags |= flag;
    112a:	80 62       	ori	r24, 0x20	; 32
    112c:	9d 83       	std	Y+5, r25	; 0x05
    112e:	8c 83       	std	Y+4, r24	; 0x04
checkLongPress():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:233
      setFlag(kFlagLongPressed);
      handleEvent(kEventLongPressed);
    1130:	64 e0       	ldi	r22, 0x04	; 4
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ace_button::AceButton::handleEvent(unsigned char)>
checkEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:163
  }

  if (mButtonConfig->isFeature(ButtonConfig::kFeatureLongPress)) {
    checkLongPress(now, buttonState);
  }
  if (mButtonConfig->isFeature(ButtonConfig::kFeatureRepeatPress)) {
    1138:	e8 81       	ld	r30, Y
    113a:	f9 81       	ldd	r31, Y+1	; 0x01
_ZNK10ace_button12ButtonConfig9isFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:326
    113c:	84 81       	ldd	r24, Z+4	; 0x04
checkEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:163
    113e:	83 ff       	sbrs	r24, 3
    1140:	1a c0       	rjmp	.+52     	; 0x1176 <main+0x378>
getDefaultReleasedState():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:111
    mFlags &= ~kFlagDefaultReleasedState;
  }
}

uint8_t AceButton::getDefaultReleasedState() const {
  return (mFlags & kFlagDefaultReleasedState) ? HIGH : LOW;
    1142:	8c 81       	ldd	r24, Y+4	; 0x04
    1144:	9d 81       	ldd	r25, Y+5	; 0x05
    1146:	28 2f       	mov	r18, r24
    1148:	21 70       	andi	r18, 0x01	; 1
checkRepeatPress():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:239
    }
  }
}

void AceButton::checkRepeatPress(uint16_t now, uint8_t buttonState) {
  if (buttonState == getDefaultReleasedState()) {
    114a:	72 16       	cp	r7, r18
    114c:	a1 f0       	breq	.+40     	; 0x1176 <main+0x378>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:243
    return;
  }

  if (isFlag(kFlagPressed)) {
    114e:	82 ff       	sbrs	r24, 2
    1150:	12 c0       	rjmp	.+36     	; 0x1176 <main+0x378>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:244
    if (isFlag(kFlagRepeatPressed)) {
    1152:	86 ff       	sbrs	r24, 6
    1154:	87 c0       	rjmp	.+270    	; 0x1264 <main+0x466>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:245
      uint16_t elapsedTime = now - mLastRepeatPressTime;
    1156:	8d 85       	ldd	r24, Y+13	; 0x0d
    1158:	9e 85       	ldd	r25, Y+14	; 0x0e
    115a:	96 01       	movw	r18, r12
    115c:	28 1b       	sub	r18, r24
    115e:	39 0b       	sbc	r19, r25
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:246
      if (elapsedTime >= mButtonConfig->getRepeatPressInterval()) {
    1160:	80 89       	ldd	r24, Z+16	; 0x10
    1162:	91 89       	ldd	r25, Z+17	; 0x11
    1164:	28 17       	cp	r18, r24
    1166:	39 07       	cpc	r19, r25
    1168:	30 f0       	brcs	.+12     	; 0x1176 <main+0x378>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:256
      uint16_t elapsedTime = now - mLastPressTime;
      if (elapsedTime >= mButtonConfig->getRepeatPressDelay()) {
        setFlag(kFlagRepeatPressed);
        // Trigger the RepeatPressed immedidately, instead of waiting until the
        // first getRepeatPressInterval() has passed.
        handleEvent(kEventRepeatPressed);
    116a:	65 e0       	ldi	r22, 0x05	; 5
    116c:	ce 01       	movw	r24, r28
    116e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ace_button::AceButton::handleEvent(unsigned char)>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:257
        mLastRepeatPressTime = now;
    1172:	de 86       	std	Y+14, r13	; 0x0e
    1174:	cd 86       	std	Y+13, r12	; 0x0d
checkEvent():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:166
    checkLongPress(now, buttonState);
  }
  if (mButtonConfig->isFeature(ButtonConfig::kFeatureRepeatPress)) {
    checkRepeatPress(now, buttonState);
  }
  if (buttonState != getLastButtonState()) {
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	78 16       	cp	r7, r24
    117a:	09 f4       	brne	.+2      	; 0x117e <main+0x380>
    117c:	71 c0       	rjmp	.+226    	; 0x1260 <main+0x462>
checkChanged():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:264
    }
  }
}

void AceButton::checkChanged(uint16_t now, uint8_t buttonState) {
  mLastButtonState = buttonState;
    117e:	7e 82       	std	Y+6, r7	; 0x06
getDefaultReleasedState():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:111
    mFlags &= ~kFlagDefaultReleasedState;
  }
}

uint8_t AceButton::getDefaultReleasedState() const {
  return (mFlags & kFlagDefaultReleasedState) ? HIGH : LOW;
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	28 2f       	mov	r18, r24
    1186:	21 70       	andi	r18, 0x01	; 1
checkPressed():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:270
  checkPressed(now, buttonState);
  checkReleased(now, buttonState);
}

void AceButton::checkPressed(uint16_t now, uint8_t buttonState) {
  if (buttonState == getDefaultReleasedState()) {
    1188:	72 16       	cp	r7, r18
    118a:	49 f0       	breq	.+18     	; 0x119e <main+0x3a0>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:275
    return;
  }

  // button was pressed
  mLastPressTime = now;
    118c:	dc 86       	std	Y+12, r13	; 0x0c
    118e:	cb 86       	std	Y+11, r12	; 0x0b
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    1190:	84 60       	ori	r24, 0x04	; 4
    1192:	9d 83       	std	Y+5, r25	; 0x05
    1194:	8c 83       	std	Y+4, r24	; 0x04
checkPressed():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:277
  setFlag(kFlagPressed);
  handleEvent(kEventPressed);
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	ce 01       	movw	r24, r28
    119a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ace_button::AceButton::handleEvent(unsigned char)>
getDefaultReleasedState():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:111
    mFlags &= ~kFlagDefaultReleasedState;
  }
}

uint8_t AceButton::getDefaultReleasedState() const {
  return (mFlags & kFlagDefaultReleasedState) ? HIGH : LOW;
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	9d 81       	ldd	r25, Y+5	; 0x05
    11a2:	28 2f       	mov	r18, r24
    11a4:	21 70       	andi	r18, 0x01	; 1
checkReleased():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:281
  setFlag(kFlagPressed);
  handleEvent(kEventPressed);
}

void AceButton::checkReleased(uint16_t now, uint8_t buttonState) {
  if (buttonState != getDefaultReleasedState()) {
    11a6:	72 12       	cpse	r7, r18
    11a8:	5b c0       	rjmp	.+182    	; 0x1260 <main+0x462>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:287
    return;
  }

  // Check for click (before sending off the Released event).
  // Make sure that we don't clearPressed() before calling this.
  if (mButtonConfig->isFeature(ButtonConfig::kFeatureClick)
    11aa:	e8 81       	ld	r30, Y
    11ac:	f9 81       	ldd	r31, Y+1	; 0x01
    11ae:	24 81       	ldd	r18, Z+4	; 0x04
    11b0:	35 81       	ldd	r19, Z+5	; 0x05
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:288
      || mButtonConfig->isFeature(ButtonConfig::kFeatureDoubleClick)) {
    11b2:	a9 01       	movw	r20, r18
    11b4:	43 70       	andi	r20, 0x03	; 3
    11b6:	55 27       	eor	r21, r21
    11b8:	45 2b       	or	r20, r21
    11ba:	29 f0       	breq	.+10     	; 0x11c6 <main+0x3c8>
checkClicked():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:330
    handleEvent(kEventReleased);
  }
}

void AceButton::checkClicked(uint16_t now) {
  if (!isFlag(kFlagPressed)) {
    11bc:	82 fd       	sbrc	r24, 2
    11be:	61 c0       	rjmp	.+194    	; 0x1282 <main+0x484>
_ZN10ace_button9AceButton9clearFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:388
    }

    void clearFlag(FlagType flag) {
      mFlags &= ~flag;
    11c0:	87 7f       	andi	r24, 0xF7	; 247
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    bool isFlag(FlagType flag) const {
      return mFlags & flag;
    }

    void setFlag(FlagType flag) {
      mFlags |= flag;
    11c2:	9d 83       	std	Y+5, r25	; 0x05
    11c4:	8c 83       	std	Y+4, r24	; 0x04
    11c6:	2c 81       	ldd	r18, Y+4	; 0x04
    11c8:	3d 81       	ldd	r19, Y+5	; 0x05
checkReleased():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:304
              isFeature(ButtonConfig::kFeatureSuppressAfterLongPress)) ||
      (isFlag(kFlagRepeatPressed) &&
          mButtonConfig->
              isFeature(ButtonConfig::kFeatureSuppressAfterRepeatPress)) ||
      (isFlag(kFlagClicked) &&
          mButtonConfig->isFeature(ButtonConfig::kFeatureSuppressAfterClick)) ||
    11ca:	a9 01       	movw	r20, r18
    11cc:	40 72       	andi	r20, 0x20	; 32
    11ce:	55 27       	eor	r21, r21
    11d0:	25 ff       	sbrs	r18, 5
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <main+0x3e0>
_ZNK10ace_button12ButtonConfig9isFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:326
    11d4:	e8 81       	ld	r30, Y
    11d6:	f9 81       	ldd	r31, Y+1	; 0x01
    11d8:	84 81       	ldd	r24, Z+4	; 0x04
checkReleased():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:297
  // Save whether this was generated from a long press.
  bool wasLongPressed = isFlag(kFlagLongPressed);

  // Check if Released events are suppressed.
  bool suppress =
      ((isFlag(kFlagLongPressed) &&
    11da:	86 fd       	sbrc	r24, 6
    11dc:	94 c0       	rjmp	.+296    	; 0x1306 <main+0x508>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:299
          mButtonConfig->
              isFeature(ButtonConfig::kFeatureSuppressAfterLongPress)) ||
    11de:	26 ff       	sbrs	r18, 6
    11e0:	05 c0       	rjmp	.+10     	; 0x11ec <main+0x3ee>
_ZNK10ace_button12ButtonConfig9isFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:326
    11e2:	e8 81       	ld	r30, Y
    11e4:	f9 81       	ldd	r31, Y+1	; 0x01
    11e6:	84 81       	ldd	r24, Z+4	; 0x04
checkReleased():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:300
      (isFlag(kFlagRepeatPressed) &&
    11e8:	87 fd       	sbrc	r24, 7
    11ea:	8d c0       	rjmp	.+282    	; 0x1306 <main+0x508>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:302
          mButtonConfig->
              isFeature(ButtonConfig::kFeatureSuppressAfterRepeatPress)) ||
    11ec:	23 ff       	sbrs	r18, 3
    11ee:	05 c0       	rjmp	.+10     	; 0x11fa <main+0x3fc>
_ZNK10ace_button12ButtonConfig9isFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:326
    11f0:	e8 81       	ld	r30, Y
    11f2:	f9 81       	ldd	r31, Y+1	; 0x01
    11f4:	84 81       	ldd	r24, Z+4	; 0x04
checkReleased():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:303
      (isFlag(kFlagClicked) &&
    11f6:	84 fd       	sbrc	r24, 4
    11f8:	86 c0       	rjmp	.+268    	; 0x1306 <main+0x508>
main():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:304
          mButtonConfig->isFeature(ButtonConfig::kFeatureSuppressAfterClick)) ||
    11fa:	80 e0       	ldi	r24, 0x00	; 0
checkReleased():
    11fc:	24 ff       	sbrs	r18, 4
    11fe:	0a c0       	rjmp	.+20     	; 0x1214 <main+0x416>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:305
      (isFlag(kFlagDoubleClicked) &&
    1200:	e8 81       	ld	r30, Y
    1202:	f9 81       	ldd	r31, Y+1	; 0x01
    1204:	84 81       	ldd	r24, Z+4	; 0x04
    1206:	95 81       	ldd	r25, Z+5	; 0x05
    1208:	65 e0       	ldi	r22, 0x05	; 5
    120a:	96 95       	lsr	r25
    120c:	87 95       	ror	r24
    120e:	6a 95       	dec	r22
    1210:	e1 f7       	brne	.-8      	; 0x120a <main+0x40c>
    1212:	81 70       	andi	r24, 0x01	; 1
_ZN10ace_button9AceButton9clearFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:388
    }

    void clearFlag(FlagType flag) {
      mFlags &= ~flag;
    1214:	2b 78       	andi	r18, 0x8B	; 139
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
checkReleased():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:320
  clearFlag(kFlagLongPressed);
  clearFlag(kFlagRepeatPressed);

  // Fire off a Released event, unless suppressed. Replace Released with
  // LongReleased if this was a LongPressed.
  if (suppress) {
    121a:	88 23       	and	r24, r24
    121c:	09 f4       	brne	.+2      	; 0x1220 <main+0x422>
    121e:	75 c0       	rjmp	.+234    	; 0x130a <main+0x50c>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:322
    if (wasLongPressed) {
      handleEvent(kEventLongReleased);
    1220:	66 e0       	ldi	r22, 0x06	; 6
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:321
  clearFlag(kFlagRepeatPressed);

  // Fire off a Released event, unless suppressed. Replace Released with
  // LongReleased if this was a LongPressed.
  if (suppress) {
    if (wasLongPressed) {
    1222:	45 2b       	or	r20, r21
    1224:	e9 f0       	breq	.+58     	; 0x1260 <main+0x462>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:325
      handleEvent(kEventLongReleased);
    }
  } else {
    handleEvent(kEventReleased);
    1226:	ce 01       	movw	r24, r28
    1228:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ace_button::AceButton::handleEvent(unsigned char)>
    122c:	19 c0       	rjmp	.+50     	; 0x1260 <main+0x462>
checkHeartBeat():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:429
    setFlag(kFlagHeartRunning);
    mLastHeartBeatTime = now;
    return;
  }

  uint16_t elapsedTime = now - mLastHeartBeatTime;
    122e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1230:	98 89       	ldd	r25, Y+16	; 0x10
    1232:	96 01       	movw	r18, r12
    1234:	28 1b       	sub	r18, r24
    1236:	39 0b       	sbc	r19, r25
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:430
  if (elapsedTime >= mButtonConfig->getHeartBeatInterval()) {
    1238:	82 89       	ldd	r24, Z+18	; 0x12
    123a:	93 89       	ldd	r25, Z+19	; 0x13
    123c:	28 17       	cp	r18, r24
    123e:	39 07       	cpc	r19, r25
    1240:	08 f4       	brcc	.+2      	; 0x1244 <main+0x446>
    1242:	0f cf       	rjmp	.-482    	; 0x1062 <main+0x264>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:434
    // This causes the kEventHeartBeat to be sent with the last validated button
    // state, not the current button state. I think that makes more sense, but
    // there might be situations where it doesn't.
    handleEvent(kEventHeartBeat);
    1244:	67 e0       	ldi	r22, 0x07	; 7
    1246:	ce 01       	movw	r24, r28
    1248:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ace_button::AceButton::handleEvent(unsigned char)>
    124c:	08 cf       	rjmp	.-496    	; 0x105e <main+0x260>
checkDebounced():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:197
      return false;
    }
  } else {
    // Currently not in debouncing phase. Check for a button state change. This
    // will also detect a transition from kButtonStateUnknown to HIGH or LOW.
    if (buttonState == getLastButtonState()) {
    124e:	2e 81       	ldd	r18, Y+6	; 0x06
    1250:	72 16       	cp	r7, r18
    1252:	09 f4       	brne	.+2      	; 0x1256 <main+0x458>
    1254:	1a cf       	rjmp	.-460    	; 0x108a <main+0x28c>
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    bool isFlag(FlagType flag) const {
      return mFlags & flag;
    }

    void setFlag(FlagType flag) {
      mFlags |= flag;
    1256:	82 60       	ori	r24, 0x02	; 2
    1258:	9d 83       	std	Y+5, r25	; 0x05
    125a:	8c 83       	std	Y+4, r24	; 0x04
checkDebounced():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:204
      return true;
    }

    // button has changed so, enter debouncing phase
    setFlag(kFlagDebouncing);
    mLastDebounceTime = now;
    125c:	d8 86       	std	Y+8, r13	; 0x08
    125e:	cf 82       	std	Y+7, r12	; 0x07
checkButtons():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/LadderButtonConfig.cpp:61
}

void LadderButtonConfig::checkButtons() const {
  uint8_t virtualPin = getVirtualPin();

  for (uint8_t i = 0; i < mNumButtons; i++) {
    1260:	1f 5f       	subi	r17, 0xFF	; 255
    1262:	cd ce       	rjmp	.-614    	; 0xffe <main+0x200>
checkRepeatPress():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:251
      if (elapsedTime >= mButtonConfig->getRepeatPressInterval()) {
        handleEvent(kEventRepeatPressed);
        mLastRepeatPressTime = now;
      }
    } else {
      uint16_t elapsedTime = now - mLastPressTime;
    1264:	2b 85       	ldd	r18, Y+11	; 0x0b
    1266:	3c 85       	ldd	r19, Y+12	; 0x0c
    1268:	a6 01       	movw	r20, r12
    126a:	42 1b       	sub	r20, r18
    126c:	53 0b       	sbc	r21, r19
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:252
      if (elapsedTime >= mButtonConfig->getRepeatPressDelay()) {
    126e:	26 85       	ldd	r18, Z+14	; 0x0e
    1270:	37 85       	ldd	r19, Z+15	; 0x0f
    1272:	42 17       	cp	r20, r18
    1274:	53 07       	cpc	r21, r19
    1276:	08 f4       	brcc	.+2      	; 0x127a <main+0x47c>
    1278:	7e cf       	rjmp	.-260    	; 0x1176 <main+0x378>
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    127a:	80 64       	ori	r24, 0x40	; 64
    127c:	9d 83       	std	Y+5, r25	; 0x05
    127e:	8c 83       	std	Y+4, r24	; 0x04
    1280:	74 cf       	rjmp	.-280    	; 0x116a <main+0x36c>
checkClicked():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:338
    // Release, it shouldn't generated a click, even accidentally due to a
    // spurious value in mLastPressTime.
    clearFlag(kFlagClicked);
    return;
  }
  uint16_t elapsedTime = now - mLastPressTime;
    1282:	4b 85       	ldd	r20, Y+11	; 0x0b
    1284:	5c 85       	ldd	r21, Y+12	; 0x0c
    1286:	b6 01       	movw	r22, r12
    1288:	64 1b       	sub	r22, r20
    128a:	75 0b       	sbc	r23, r21
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:339
  if (elapsedTime >= mButtonConfig->getClickDelay()) {
    128c:	40 85       	ldd	r20, Z+8	; 0x08
    128e:	51 85       	ldd	r21, Z+9	; 0x09
    1290:	64 17       	cp	r22, r20
    1292:	75 07       	cpc	r23, r21
    1294:	08 f0       	brcs	.+2      	; 0x1298 <main+0x49a>
    1296:	94 cf       	rjmp	.-216    	; 0x11c0 <main+0x3c2>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:345
    clearFlag(kFlagClicked);
    return;
  }

  // check for double click
  if (mButtonConfig->isFeature(ButtonConfig::kFeatureDoubleClick)) {
    1298:	21 ff       	sbrs	r18, 1
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <main+0x4a8>
checkDoubleClicked():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:369
    handleEvent(kEventClicked);
  }
}

void AceButton::checkDoubleClicked(uint16_t now) {
  if (!isFlag(kFlagClicked)) {
    129c:	83 fd       	sbrc	r24, 3
    129e:	15 c0       	rjmp	.+42     	; 0x12ca <main+0x4cc>
_ZN10ace_button9AceButton9clearFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:388
    }

    void clearFlag(FlagType flag) {
      mFlags &= ~flag;
    12a0:	8f 7e       	andi	r24, 0xEF	; 239
    12a2:	9d 83       	std	Y+5, r25	; 0x05
    12a4:	8c 83       	std	Y+4, r24	; 0x04
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	9d 81       	ldd	r25, Y+5	; 0x05
checkClicked():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:352
  }

  // Suppress a second click (both buttonState change and event message) if
  // double-click detected, which has the side-effect of preventing 3 clicks
  // from generating another double-click at the third click.
  if (isFlag(kFlagDoubleClicked)) {
    12aa:	84 fd       	sbrc	r24, 4
    12ac:	89 cf       	rjmp	.-238    	; 0x11c0 <main+0x3c2>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:358
    clearFlag(kFlagClicked);
    return;
  }

  // we got a single click
  mLastClickTime = now;
    12ae:	da 86       	std	Y+10, r13	; 0x0a
    12b0:	c9 86       	std	Y+9, r12	; 0x09
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    bool isFlag(FlagType flag) const {
      return mFlags & flag;
    }

    void setFlag(FlagType flag) {
      mFlags |= flag;
    12b2:	9c 01       	movw	r18, r24
    12b4:	28 60       	ori	r18, 0x08	; 8
    12b6:	3d 83       	std	Y+5, r19	; 0x05
    12b8:	2c 83       	std	Y+4, r18	; 0x04
_ZNK10ace_button12ButtonConfig9isFeatureEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/ButtonConfig.h:326
    12ba:	e8 81       	ld	r30, Y
    12bc:	f9 81       	ldd	r31, Y+1	; 0x01
    12be:	24 81       	ldd	r18, Z+4	; 0x04
    12c0:	35 81       	ldd	r19, Z+5	; 0x05
checkClicked():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:360
  setFlag(kFlagClicked);
  if (mButtonConfig->isFeature(
    12c2:	30 ff       	sbrs	r19, 0
    12c4:	1b c0       	rjmp	.+54     	; 0x12fc <main+0x4fe>
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    12c6:	88 68       	ori	r24, 0x88	; 136
    12c8:	7c cf       	rjmp	.-264    	; 0x11c2 <main+0x3c4>
checkDoubleClicked():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:374
  if (!isFlag(kFlagClicked)) {
    clearFlag(kFlagDoubleClicked);
    return;
  }

  uint16_t elapsedTime = now - mLastClickTime;
    12ca:	29 85       	ldd	r18, Y+9	; 0x09
    12cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ce:	a6 01       	movw	r20, r12
    12d0:	42 1b       	sub	r20, r18
    12d2:	53 0b       	sbc	r21, r19
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:375
  if (elapsedTime >= mButtonConfig->getDoubleClickDelay()) {
    12d4:	22 85       	ldd	r18, Z+10	; 0x0a
    12d6:	33 85       	ldd	r19, Z+11	; 0x0b
    12d8:	42 17       	cp	r20, r18
    12da:	53 07       	cpc	r21, r19
    12dc:	08 f7       	brcc	.-62     	; 0x12a0 <main+0x4a2>
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:386

  // If there was a postponed click, suppress it because it could only have been
  // postponed if kFeatureSuppressClickBeforeDoubleClick was enabled. If we got
  // to this point, there was a DoubleClick, so we must suppress the first
  // Click as requested.
  if (isFlag(kFlagClickPostponed)) {
    12de:	87 ff       	sbrs	r24, 7
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <main+0x4ea>
_ZN10ace_button9AceButton9clearFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:388
    }

    void clearFlag(FlagType flag) {
      mFlags &= ~flag;
    12e2:	8f 77       	andi	r24, 0x7F	; 127
    12e4:	9d 83       	std	Y+5, r25	; 0x05
    12e6:	8c 83       	std	Y+4, r24	; 0x04
_ZN10ace_button9AceButton7setFlagEj():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.h:384
    bool isFlag(FlagType flag) const {
      return mFlags & flag;
    }

    void setFlag(FlagType flag) {
      mFlags |= flag;
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	9d 81       	ldd	r25, Y+5	; 0x05
    12ec:	80 61       	ori	r24, 0x10	; 16
    12ee:	9d 83       	std	Y+5, r25	; 0x05
    12f0:	8c 83       	std	Y+4, r24	; 0x04
checkDoubleClicked():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:390
    clearFlag(kFlagClickPostponed);
  }
  setFlag(kFlagDoubleClicked);
  handleEvent(kEventDoubleClicked);
    12f2:	63 e0       	ldi	r22, 0x03	; 3
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ace_button::AceButton::handleEvent(unsigned char)>
    12fa:	d5 cf       	rjmp	.-86     	; 0x12a6 <main+0x4a8>
checkClicked():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:364
  setFlag(kFlagClicked);
  if (mButtonConfig->isFeature(
      ButtonConfig::kFeatureSuppressClickBeforeDoubleClick)) {
    setFlag(kFlagClickPostponed);
  } else {
    handleEvent(kEventClicked);
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	ce 01       	movw	r24, r28
    1300:	0e 94 54 03 	call	0x6a8	; 0x6a8 <ace_button::AceButton::handleEvent(unsigned char)>
    1304:	60 cf       	rjmp	.-320    	; 0x11c6 <main+0x3c8>
main():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:304
              isFeature(ButtonConfig::kFeatureSuppressAfterLongPress)) ||
      (isFlag(kFlagRepeatPressed) &&
          mButtonConfig->
              isFeature(ButtonConfig::kFeatureSuppressAfterRepeatPress)) ||
      (isFlag(kFlagClicked) &&
          mButtonConfig->isFeature(ButtonConfig::kFeatureSuppressAfterClick)) ||
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	85 cf       	rjmp	.-246    	; 0x1214 <main+0x416>
checkReleased():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:325
  if (suppress) {
    if (wasLongPressed) {
      handleEvent(kEventLongReleased);
    }
  } else {
    handleEvent(kEventReleased);
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	8c cf       	rjmp	.-232    	; 0x1226 <main+0x428>
checkInitialized():
/Users/maxwlang/Documents/Arduino/libraries/AceButton/src/ace_button/AceButton.cpp:220
  // valid button state, but don't fire off the event handler. This handles the
  // case where a momentary switch is pressed down, then the board is rebooted.
  // When the board comes up, it should not fire off the event handler. This
  // also handles the case of a 2-position switch set to the "pressed"
  // position, and the board is rebooted.
  mLastButtonState = buttonState;
    130e:	7e 82       	std	Y+6, r7	; 0x06
    1310:	a7 cf       	rjmp	.-178    	; 0x1260 <main+0x462>
serialEventRun():
/Users/maxwlang/Library/Arduino15/packages/MiniCore/hardware/avr/3.0.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    1312:	a1 14       	cp	r10, r1
    1314:	b1 04       	cpc	r11, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <main+0x51c>
    1318:	3d ce       	rjmp	.-902    	; 0xf94 <main+0x196>
    131a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Serial0_available()>
    131e:	88 23       	and	r24, r24
    1320:	09 f4       	brne	.+2      	; 0x1324 <main+0x526>
    1322:	38 ce       	rjmp	.-912    	; 0xf94 <main+0x196>
    1324:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1328:	35 ce       	rjmp	.-918    	; 0xf94 <main+0x196>

0000132a <__subsf3>:
__subsf3():
    132a:	50 58       	subi	r21, 0x80	; 128

0000132c <__addsf3>:
    132c:	bb 27       	eor	r27, r27
    132e:	aa 27       	eor	r26, r26
    1330:	0e 94 ad 09 	call	0x135a	; 0x135a <__addsf3x>
    1334:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>
__addsf3():
    1338:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscA>
    133c:	38 f0       	brcs	.+14     	; 0x134c <__addsf3+0x20>
    133e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscB>
    1342:	20 f0       	brcs	.+8      	; 0x134c <__addsf3+0x20>
    1344:	39 f4       	brne	.+14     	; 0x1354 <__addsf3+0x28>
    1346:	9f 3f       	cpi	r25, 0xFF	; 255
    1348:	19 f4       	brne	.+6      	; 0x1350 <__addsf3+0x24>
    134a:	26 f4       	brtc	.+8      	; 0x1354 <__addsf3+0x28>
    134c:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>
    1350:	0e f4       	brtc	.+2      	; 0x1354 <__addsf3+0x28>
    1352:	e0 95       	com	r30
    1354:	e7 fb       	bst	r30, 7
    1356:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>

0000135a <__addsf3x>:
__addsf3x():
    135a:	e9 2f       	mov	r30, r25
    135c:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_split3>
    1360:	58 f3       	brcs	.-42     	; 0x1338 <__addsf3+0xc>
    1362:	ba 17       	cp	r27, r26
    1364:	62 07       	cpc	r22, r18
    1366:	73 07       	cpc	r23, r19
    1368:	84 07       	cpc	r24, r20
    136a:	95 07       	cpc	r25, r21
    136c:	20 f0       	brcs	.+8      	; 0x1376 <__addsf3x+0x1c>
    136e:	79 f4       	brne	.+30     	; 0x138e <__addsf3x+0x34>
    1370:	a6 f5       	brtc	.+104    	; 0x13da <__addsf3x+0x80>
    1372:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_zero>
    1376:	0e f4       	brtc	.+2      	; 0x137a <__addsf3x+0x20>
    1378:	e0 95       	com	r30
    137a:	0b 2e       	mov	r0, r27
    137c:	ba 2f       	mov	r27, r26
    137e:	a0 2d       	mov	r26, r0
    1380:	0b 01       	movw	r0, r22
    1382:	b9 01       	movw	r22, r18
    1384:	90 01       	movw	r18, r0
    1386:	0c 01       	movw	r0, r24
    1388:	ca 01       	movw	r24, r20
    138a:	a0 01       	movw	r20, r0
    138c:	11 24       	eor	r1, r1
    138e:	ff 27       	eor	r31, r31
    1390:	59 1b       	sub	r21, r25
    1392:	99 f0       	breq	.+38     	; 0x13ba <__addsf3x+0x60>
    1394:	59 3f       	cpi	r21, 0xF9	; 249
    1396:	50 f4       	brcc	.+20     	; 0x13ac <__addsf3x+0x52>
    1398:	50 3e       	cpi	r21, 0xE0	; 224
    139a:	68 f1       	brcs	.+90     	; 0x13f6 <__addsf3x+0x9c>
    139c:	1a 16       	cp	r1, r26
    139e:	f0 40       	sbci	r31, 0x00	; 0
    13a0:	a2 2f       	mov	r26, r18
    13a2:	23 2f       	mov	r18, r19
    13a4:	34 2f       	mov	r19, r20
    13a6:	44 27       	eor	r20, r20
    13a8:	58 5f       	subi	r21, 0xF8	; 248
    13aa:	f3 cf       	rjmp	.-26     	; 0x1392 <__addsf3x+0x38>
    13ac:	46 95       	lsr	r20
    13ae:	37 95       	ror	r19
    13b0:	27 95       	ror	r18
    13b2:	a7 95       	ror	r26
    13b4:	f0 40       	sbci	r31, 0x00	; 0
    13b6:	53 95       	inc	r21
    13b8:	c9 f7       	brne	.-14     	; 0x13ac <__addsf3x+0x52>
    13ba:	7e f4       	brtc	.+30     	; 0x13da <__addsf3x+0x80>
    13bc:	1f 16       	cp	r1, r31
    13be:	ba 0b       	sbc	r27, r26
    13c0:	62 0b       	sbc	r22, r18
    13c2:	73 0b       	sbc	r23, r19
    13c4:	84 0b       	sbc	r24, r20
    13c6:	ba f0       	brmi	.+46     	; 0x13f6 <__addsf3x+0x9c>
    13c8:	91 50       	subi	r25, 0x01	; 1
    13ca:	a1 f0       	breq	.+40     	; 0x13f4 <__addsf3x+0x9a>
    13cc:	ff 0f       	add	r31, r31
    13ce:	bb 1f       	adc	r27, r27
    13d0:	66 1f       	adc	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	88 1f       	adc	r24, r24
    13d6:	c2 f7       	brpl	.-16     	; 0x13c8 <__addsf3x+0x6e>
    13d8:	0e c0       	rjmp	.+28     	; 0x13f6 <__addsf3x+0x9c>
    13da:	ba 0f       	add	r27, r26
    13dc:	62 1f       	adc	r22, r18
    13de:	73 1f       	adc	r23, r19
    13e0:	84 1f       	adc	r24, r20
    13e2:	48 f4       	brcc	.+18     	; 0x13f6 <__addsf3x+0x9c>
    13e4:	87 95       	ror	r24
    13e6:	77 95       	ror	r23
    13e8:	67 95       	ror	r22
    13ea:	b7 95       	ror	r27
    13ec:	f7 95       	ror	r31
    13ee:	9e 3f       	cpi	r25, 0xFE	; 254
    13f0:	08 f0       	brcs	.+2      	; 0x13f4 <__addsf3x+0x9a>
    13f2:	b0 cf       	rjmp	.-160    	; 0x1354 <__addsf3+0x28>
    13f4:	93 95       	inc	r25
    13f6:	88 0f       	add	r24, r24
    13f8:	08 f0       	brcs	.+2      	; 0x13fc <__addsf3x+0xa2>
    13fa:	99 27       	eor	r25, r25
    13fc:	ee 0f       	add	r30, r30
    13fe:	97 95       	ror	r25
    1400:	87 95       	ror	r24
    1402:	08 95       	ret

00001404 <__divsf3>:
    1404:	0e 94 16 0a 	call	0x142c	; 0x142c <__divsf3x>
    1408:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>
    140c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscB>
    1410:	58 f0       	brcs	.+22     	; 0x1428 <__divsf3+0x24>
    1412:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscA>
    1416:	40 f0       	brcs	.+16     	; 0x1428 <__divsf3+0x24>
    1418:	29 f4       	brne	.+10     	; 0x1424 <__divsf3+0x20>
    141a:	5f 3f       	cpi	r21, 0xFF	; 255
    141c:	29 f0       	breq	.+10     	; 0x1428 <__divsf3+0x24>
    141e:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    1422:	51 11       	cpse	r21, r1
    1424:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
__divsf3():
    1428:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>

0000142c <__divsf3x>:
__divsf3x():
    142c:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_split3>
    1430:	68 f3       	brcs	.-38     	; 0x140c <__divsf3+0x8>

00001432 <__divsf3_pse>:
    1432:	99 23       	and	r25, r25
    1434:	b1 f3       	breq	.-20     	; 0x1422 <__divsf3+0x1e>
    1436:	55 23       	and	r21, r21
    1438:	91 f3       	breq	.-28     	; 0x141e <__divsf3+0x1a>
    143a:	95 1b       	sub	r25, r21
    143c:	55 0b       	sbc	r21, r21
    143e:	bb 27       	eor	r27, r27
    1440:	aa 27       	eor	r26, r26
    1442:	62 17       	cp	r22, r18
    1444:	73 07       	cpc	r23, r19
    1446:	84 07       	cpc	r24, r20
    1448:	38 f0       	brcs	.+14     	; 0x1458 <__divsf3_pse+0x26>
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	5f 4f       	sbci	r21, 0xFF	; 255
    144e:	22 0f       	add	r18, r18
    1450:	33 1f       	adc	r19, r19
    1452:	44 1f       	adc	r20, r20
    1454:	aa 1f       	adc	r26, r26
    1456:	a9 f3       	breq	.-22     	; 0x1442 <__divsf3_pse+0x10>
    1458:	35 d0       	rcall	.+106    	; 0x14c4 <__divsf3_pse+0x92>
    145a:	0e 2e       	mov	r0, r30
    145c:	3a f0       	brmi	.+14     	; 0x146c <__divsf3_pse+0x3a>
    145e:	e0 e8       	ldi	r30, 0x80	; 128
    1460:	32 d0       	rcall	.+100    	; 0x14c6 <__divsf3_pse+0x94>
    1462:	91 50       	subi	r25, 0x01	; 1
    1464:	50 40       	sbci	r21, 0x00	; 0
    1466:	e6 95       	lsr	r30
    1468:	00 1c       	adc	r0, r0
    146a:	ca f7       	brpl	.-14     	; 0x145e <__divsf3_pse+0x2c>
    146c:	2b d0       	rcall	.+86     	; 0x14c4 <__divsf3_pse+0x92>
    146e:	fe 2f       	mov	r31, r30
    1470:	29 d0       	rcall	.+82     	; 0x14c4 <__divsf3_pse+0x92>
    1472:	66 0f       	add	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	bb 1f       	adc	r27, r27
    147a:	26 17       	cp	r18, r22
    147c:	37 07       	cpc	r19, r23
    147e:	48 07       	cpc	r20, r24
    1480:	ab 07       	cpc	r26, r27
    1482:	b0 e8       	ldi	r27, 0x80	; 128
    1484:	09 f0       	breq	.+2      	; 0x1488 <__divsf3_pse+0x56>
    1486:	bb 0b       	sbc	r27, r27
    1488:	80 2d       	mov	r24, r0
    148a:	bf 01       	movw	r22, r30
    148c:	ff 27       	eor	r31, r31
    148e:	93 58       	subi	r25, 0x83	; 131
    1490:	5f 4f       	sbci	r21, 0xFF	; 255
    1492:	3a f0       	brmi	.+14     	; 0x14a2 <__divsf3_pse+0x70>
    1494:	9e 3f       	cpi	r25, 0xFE	; 254
    1496:	51 05       	cpc	r21, r1
    1498:	78 f0       	brcs	.+30     	; 0x14b8 <__divsf3_pse+0x86>
    149a:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    149e:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    14a2:	5f 3f       	cpi	r21, 0xFF	; 255
    14a4:	e4 f3       	brlt	.-8      	; 0x149e <__divsf3_pse+0x6c>
    14a6:	98 3e       	cpi	r25, 0xE8	; 232
    14a8:	d4 f3       	brlt	.-12     	; 0x149e <__divsf3_pse+0x6c>
    14aa:	86 95       	lsr	r24
    14ac:	77 95       	ror	r23
    14ae:	67 95       	ror	r22
    14b0:	b7 95       	ror	r27
    14b2:	f7 95       	ror	r31
    14b4:	9f 5f       	subi	r25, 0xFF	; 255
    14b6:	c9 f7       	brne	.-14     	; 0x14aa <__divsf3_pse+0x78>
    14b8:	88 0f       	add	r24, r24
    14ba:	91 1d       	adc	r25, r1
    14bc:	96 95       	lsr	r25
    14be:	87 95       	ror	r24
    14c0:	97 f9       	bld	r25, 7
    14c2:	08 95       	ret
    14c4:	e1 e0       	ldi	r30, 0x01	; 1
    14c6:	66 0f       	add	r22, r22
    14c8:	77 1f       	adc	r23, r23
    14ca:	88 1f       	adc	r24, r24
    14cc:	bb 1f       	adc	r27, r27
    14ce:	62 17       	cp	r22, r18
    14d0:	73 07       	cpc	r23, r19
    14d2:	84 07       	cpc	r24, r20
    14d4:	ba 07       	cpc	r27, r26
    14d6:	20 f0       	brcs	.+8      	; 0x14e0 <__divsf3_pse+0xae>
    14d8:	62 1b       	sub	r22, r18
    14da:	73 0b       	sbc	r23, r19
    14dc:	84 0b       	sbc	r24, r20
    14de:	ba 0b       	sbc	r27, r26
    14e0:	ee 1f       	adc	r30, r30
    14e2:	88 f7       	brcc	.-30     	; 0x14c6 <__divsf3_pse+0x94>
    14e4:	e0 95       	com	r30
    14e6:	08 95       	ret

000014e8 <__fixunssfsi>:
    14e8:	0e 94 10 0b 	call	0x1620	; 0x1620 <__fp_splitA>
    14ec:	88 f0       	brcs	.+34     	; 0x1510 <__fixunssfsi+0x28>
    14ee:	9f 57       	subi	r25, 0x7F	; 127
    14f0:	98 f0       	brcs	.+38     	; 0x1518 <__fixunssfsi+0x30>
    14f2:	b9 2f       	mov	r27, r25
    14f4:	99 27       	eor	r25, r25
    14f6:	b7 51       	subi	r27, 0x17	; 23
    14f8:	b0 f0       	brcs	.+44     	; 0x1526 <__fixunssfsi+0x3e>
    14fa:	e1 f0       	breq	.+56     	; 0x1534 <__fixunssfsi+0x4c>
    14fc:	66 0f       	add	r22, r22
    14fe:	77 1f       	adc	r23, r23
    1500:	88 1f       	adc	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	1a f0       	brmi	.+6      	; 0x150c <__fixunssfsi+0x24>
    1506:	ba 95       	dec	r27
__fixunssfsi():
    1508:	c9 f7       	brne	.-14     	; 0x14fc <__fixunssfsi+0x14>
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <__fixunssfsi+0x4c>
    150c:	b1 30       	cpi	r27, 0x01	; 1
    150e:	91 f0       	breq	.+36     	; 0x1534 <__fixunssfsi+0x4c>
    1510:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__fp_zero>
    1514:	b1 e0       	ldi	r27, 0x01	; 1
    1516:	08 95       	ret
    1518:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_zero>
    151c:	67 2f       	mov	r22, r23
    151e:	78 2f       	mov	r23, r24
    1520:	88 27       	eor	r24, r24
    1522:	b8 5f       	subi	r27, 0xF8	; 248
    1524:	39 f0       	breq	.+14     	; 0x1534 <__fixunssfsi+0x4c>
    1526:	b9 3f       	cpi	r27, 0xF9	; 249
    1528:	cc f3       	brlt	.-14     	; 0x151c <__fixunssfsi+0x34>
    152a:	86 95       	lsr	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b3 95       	inc	r27
    1532:	d9 f7       	brne	.-10     	; 0x152a <__fixunssfsi+0x42>
    1534:	3e f4       	brtc	.+14     	; 0x1544 <__fixunssfsi+0x5c>
    1536:	90 95       	com	r25
    1538:	80 95       	com	r24
    153a:	70 95       	com	r23
    153c:	61 95       	neg	r22
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	08 95       	ret

00001546 <__floatunsisf>:
__floatunsisf():
    1546:	e8 94       	clt
    1548:	09 c0       	rjmp	.+18     	; 0x155c <__floatsisf+0x12>

0000154a <__floatsisf>:
    154a:	97 fb       	bst	r25, 7
    154c:	3e f4       	brtc	.+14     	; 0x155c <__floatsisf+0x12>
    154e:	90 95       	com	r25
    1550:	80 95       	com	r24
    1552:	70 95       	com	r23
    1554:	61 95       	neg	r22
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8f 4f       	sbci	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	99 23       	and	r25, r25
    155e:	a9 f0       	breq	.+42     	; 0x158a <__floatsisf+0x40>
    1560:	f9 2f       	mov	r31, r25
    1562:	96 e9       	ldi	r25, 0x96	; 150
    1564:	bb 27       	eor	r27, r27
    1566:	93 95       	inc	r25
    1568:	f6 95       	lsr	r31
    156a:	87 95       	ror	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b7 95       	ror	r27
    1572:	f1 11       	cpse	r31, r1
    1574:	f8 cf       	rjmp	.-16     	; 0x1566 <__floatsisf+0x1c>
    1576:	fa f4       	brpl	.+62     	; 0x15b6 <__floatsisf+0x6c>
    1578:	bb 0f       	add	r27, r27
    157a:	11 f4       	brne	.+4      	; 0x1580 <__floatsisf+0x36>
    157c:	60 ff       	sbrs	r22, 0
    157e:	1b c0       	rjmp	.+54     	; 0x15b6 <__floatsisf+0x6c>
    1580:	6f 5f       	subi	r22, 0xFF	; 255
    1582:	7f 4f       	sbci	r23, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	9f 4f       	sbci	r25, 0xFF	; 255
    1588:	16 c0       	rjmp	.+44     	; 0x15b6 <__floatsisf+0x6c>
    158a:	88 23       	and	r24, r24
    158c:	11 f0       	breq	.+4      	; 0x1592 <__floatsisf+0x48>
    158e:	96 e9       	ldi	r25, 0x96	; 150
    1590:	11 c0       	rjmp	.+34     	; 0x15b4 <__floatsisf+0x6a>
    1592:	77 23       	and	r23, r23
    1594:	21 f0       	breq	.+8      	; 0x159e <__floatsisf+0x54>
    1596:	9e e8       	ldi	r25, 0x8E	; 142
    1598:	87 2f       	mov	r24, r23
    159a:	76 2f       	mov	r23, r22
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <__floatsisf+0x5e>
    159e:	66 23       	and	r22, r22
    15a0:	71 f0       	breq	.+28     	; 0x15be <__floatsisf+0x74>
    15a2:	96 e8       	ldi	r25, 0x86	; 134
    15a4:	86 2f       	mov	r24, r22
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	2a f0       	brmi	.+10     	; 0x15b6 <__floatsisf+0x6c>
    15ac:	9a 95       	dec	r25
    15ae:	66 0f       	add	r22, r22
    15b0:	77 1f       	adc	r23, r23
    15b2:	88 1f       	adc	r24, r24
    15b4:	da f7       	brpl	.-10     	; 0x15ac <__floatsisf+0x62>
    15b6:	88 0f       	add	r24, r24
    15b8:	96 95       	lsr	r25
    15ba:	87 95       	ror	r24
    15bc:	97 f9       	bld	r25, 7
    15be:	08 95       	ret

000015c0 <__fp_inf>:
__fp_inf():
    15c0:	97 f9       	bld	r25, 7
    15c2:	9f 67       	ori	r25, 0x7F	; 127
    15c4:	80 e8       	ldi	r24, 0x80	; 128
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	08 95       	ret

000015cc <__fp_nan>:
__fp_nan():
    15cc:	9f ef       	ldi	r25, 0xFF	; 255
    15ce:	80 ec       	ldi	r24, 0xC0	; 192
    15d0:	08 95       	ret

000015d2 <__fp_pscA>:
__fp_pscA():
    15d2:	00 24       	eor	r0, r0
    15d4:	0a 94       	dec	r0
    15d6:	16 16       	cp	r1, r22
    15d8:	17 06       	cpc	r1, r23
    15da:	18 06       	cpc	r1, r24
    15dc:	09 06       	cpc	r0, r25
    15de:	08 95       	ret

000015e0 <__fp_pscB>:
__fp_pscB():
    15e0:	00 24       	eor	r0, r0
    15e2:	0a 94       	dec	r0
    15e4:	12 16       	cp	r1, r18
    15e6:	13 06       	cpc	r1, r19
    15e8:	14 06       	cpc	r1, r20
    15ea:	05 06       	cpc	r0, r21
    15ec:	08 95       	ret

000015ee <__fp_round>:
__fp_round():
    15ee:	09 2e       	mov	r0, r25
    15f0:	03 94       	inc	r0
    15f2:	00 0c       	add	r0, r0
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__fp_round+0xc>
    15f6:	88 23       	and	r24, r24
    15f8:	52 f0       	brmi	.+20     	; 0x160e <__fp_round+0x20>
    15fa:	bb 0f       	add	r27, r27
    15fc:	40 f4       	brcc	.+16     	; 0x160e <__fp_round+0x20>
    15fe:	bf 2b       	or	r27, r31
    1600:	11 f4       	brne	.+4      	; 0x1606 <__fp_round+0x18>
    1602:	60 ff       	sbrs	r22, 0
    1604:	04 c0       	rjmp	.+8      	; 0x160e <__fp_round+0x20>
    1606:	6f 5f       	subi	r22, 0xFF	; 255
    1608:	7f 4f       	sbci	r23, 0xFF	; 255
    160a:	8f 4f       	sbci	r24, 0xFF	; 255
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	08 95       	ret

00001610 <__fp_split3>:
__fp_split3():
    1610:	57 fd       	sbrc	r21, 7
    1612:	90 58       	subi	r25, 0x80	; 128
    1614:	44 0f       	add	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	59 f0       	breq	.+22     	; 0x1630 <__fp_splitA+0x10>
    161a:	5f 3f       	cpi	r21, 0xFF	; 255
    161c:	71 f0       	breq	.+28     	; 0x163a <__fp_splitA+0x1a>
    161e:	47 95       	ror	r20

00001620 <__fp_splitA>:
    1620:	88 0f       	add	r24, r24
    1622:	97 fb       	bst	r25, 7
    1624:	99 1f       	adc	r25, r25
    1626:	61 f0       	breq	.+24     	; 0x1640 <__fp_splitA+0x20>
    1628:	9f 3f       	cpi	r25, 0xFF	; 255
    162a:	79 f0       	breq	.+30     	; 0x164a <__fp_splitA+0x2a>
    162c:	87 95       	ror	r24
    162e:	08 95       	ret
    1630:	12 16       	cp	r1, r18
    1632:	13 06       	cpc	r1, r19
    1634:	14 06       	cpc	r1, r20
    1636:	55 1f       	adc	r21, r21
    1638:	f2 cf       	rjmp	.-28     	; 0x161e <__fp_split3+0xe>
    163a:	46 95       	lsr	r20
    163c:	f1 df       	rcall	.-30     	; 0x1620 <__fp_splitA>
    163e:	08 c0       	rjmp	.+16     	; 0x1650 <__fp_splitA+0x30>
    1640:	16 16       	cp	r1, r22
    1642:	17 06       	cpc	r1, r23
    1644:	18 06       	cpc	r1, r24
    1646:	99 1f       	adc	r25, r25
    1648:	f1 cf       	rjmp	.-30     	; 0x162c <__fp_splitA+0xc>
    164a:	86 95       	lsr	r24
    164c:	71 05       	cpc	r23, r1
    164e:	61 05       	cpc	r22, r1
    1650:	08 94       	sec
    1652:	08 95       	ret

00001654 <__fp_zero>:
__fp_zero():
    1654:	e8 94       	clt

00001656 <__fp_szero>:
    1656:	bb 27       	eor	r27, r27
    1658:	66 27       	eor	r22, r22
    165a:	77 27       	eor	r23, r23
    165c:	cb 01       	movw	r24, r22
    165e:	97 f9       	bld	r25, 7
    1660:	08 95       	ret

00001662 <__mulsf3>:
__mulsf3():
    1662:	0e 94 44 0b 	call	0x1688	; 0x1688 <__mulsf3x>
    1666:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__fp_round>
    166a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__fp_pscA>
    166e:	38 f0       	brcs	.+14     	; 0x167e <__mulsf3+0x1c>
    1670:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <__fp_pscB>
    1674:	20 f0       	brcs	.+8      	; 0x167e <__mulsf3+0x1c>
    1676:	95 23       	and	r25, r21
    1678:	11 f0       	breq	.+4      	; 0x167e <__mulsf3+0x1c>
    167a:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    167e:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__fp_nan>
    1682:	11 24       	eor	r1, r1
    1684:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>

00001688 <__mulsf3x>:
__mulsf3x():
    1688:	0e 94 08 0b 	call	0x1610	; 0x1610 <__fp_split3>
    168c:	70 f3       	brcs	.-36     	; 0x166a <__mulsf3+0x8>

0000168e <__mulsf3_pse>:
    168e:	95 9f       	mul	r25, r21
    1690:	c1 f3       	breq	.-16     	; 0x1682 <__mulsf3+0x20>
    1692:	95 0f       	add	r25, r21
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	55 1f       	adc	r21, r21
    1698:	62 9f       	mul	r22, r18
    169a:	f0 01       	movw	r30, r0
    169c:	72 9f       	mul	r23, r18
    169e:	bb 27       	eor	r27, r27
    16a0:	f0 0d       	add	r31, r0
    16a2:	b1 1d       	adc	r27, r1
    16a4:	63 9f       	mul	r22, r19
    16a6:	aa 27       	eor	r26, r26
    16a8:	f0 0d       	add	r31, r0
    16aa:	b1 1d       	adc	r27, r1
    16ac:	aa 1f       	adc	r26, r26
    16ae:	64 9f       	mul	r22, r20
    16b0:	66 27       	eor	r22, r22
    16b2:	b0 0d       	add	r27, r0
    16b4:	a1 1d       	adc	r26, r1
    16b6:	66 1f       	adc	r22, r22
    16b8:	82 9f       	mul	r24, r18
    16ba:	22 27       	eor	r18, r18
    16bc:	b0 0d       	add	r27, r0
    16be:	a1 1d       	adc	r26, r1
    16c0:	62 1f       	adc	r22, r18
    16c2:	73 9f       	mul	r23, r19
    16c4:	b0 0d       	add	r27, r0
    16c6:	a1 1d       	adc	r26, r1
    16c8:	62 1f       	adc	r22, r18
    16ca:	83 9f       	mul	r24, r19
    16cc:	a0 0d       	add	r26, r0
    16ce:	61 1d       	adc	r22, r1
    16d0:	22 1f       	adc	r18, r18
    16d2:	74 9f       	mul	r23, r20
    16d4:	33 27       	eor	r19, r19
    16d6:	a0 0d       	add	r26, r0
    16d8:	61 1d       	adc	r22, r1
    16da:	23 1f       	adc	r18, r19
    16dc:	84 9f       	mul	r24, r20
    16de:	60 0d       	add	r22, r0
    16e0:	21 1d       	adc	r18, r1
    16e2:	82 2f       	mov	r24, r18
    16e4:	76 2f       	mov	r23, r22
    16e6:	6a 2f       	mov	r22, r26
    16e8:	11 24       	eor	r1, r1
    16ea:	9f 57       	subi	r25, 0x7F	; 127
    16ec:	50 40       	sbci	r21, 0x00	; 0
    16ee:	9a f0       	brmi	.+38     	; 0x1716 <__mulsf3_pse+0x88>
    16f0:	f1 f0       	breq	.+60     	; 0x172e <__mulsf3_pse+0xa0>
    16f2:	88 23       	and	r24, r24
    16f4:	4a f0       	brmi	.+18     	; 0x1708 <__mulsf3_pse+0x7a>
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	bb 1f       	adc	r27, r27
    16fc:	66 1f       	adc	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	91 50       	subi	r25, 0x01	; 1
    1704:	50 40       	sbci	r21, 0x00	; 0
    1706:	a9 f7       	brne	.-22     	; 0x16f2 <__mulsf3_pse+0x64>
    1708:	9e 3f       	cpi	r25, 0xFE	; 254
    170a:	51 05       	cpc	r21, r1
    170c:	80 f0       	brcs	.+32     	; 0x172e <__mulsf3_pse+0xa0>
    170e:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__fp_inf>
    1712:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_szero>
    1716:	5f 3f       	cpi	r21, 0xFF	; 255
    1718:	e4 f3       	brlt	.-8      	; 0x1712 <__mulsf3_pse+0x84>
    171a:	98 3e       	cpi	r25, 0xE8	; 232
    171c:	d4 f3       	brlt	.-12     	; 0x1712 <__mulsf3_pse+0x84>
    171e:	86 95       	lsr	r24
    1720:	77 95       	ror	r23
    1722:	67 95       	ror	r22
    1724:	b7 95       	ror	r27
    1726:	f7 95       	ror	r31
    1728:	e7 95       	ror	r30
    172a:	9f 5f       	subi	r25, 0xFF	; 255
    172c:	c1 f7       	brne	.-16     	; 0x171e <__mulsf3_pse+0x90>
    172e:	fe 2b       	or	r31, r30
    1730:	88 0f       	add	r24, r24
    1732:	91 1d       	adc	r25, r1
    1734:	96 95       	lsr	r25
    1736:	87 95       	ror	r24
    1738:	97 f9       	bld	r25, 7
    173a:	08 95       	ret

0000173c <__udivmodsi4>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    173c:	a1 e2       	ldi	r26, 0x21	; 33
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    173e:	1a 2e       	mov	r1, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1740:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1742:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1744:	fd 01       	movw	r30, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1746:	0d c0       	rjmp	.+26     	; 0x1762 <__udivmodsi4_ep>

00001748 <__udivmodsi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1748:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    174a:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    174c:	ee 1f       	adc	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    174e:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1750:	a2 17       	cp	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1752:	b3 07       	cpc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1754:	e4 07       	cpc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1756:	f5 07       	cpc	r31, r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1758:	20 f0       	brcs	.+8      	; 0x1762 <__udivmodsi4_ep>
__udivmodsi4_loop():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    175a:	a2 1b       	sub	r26, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    175c:	b3 0b       	sbc	r27, r19
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    175e:	e4 0b       	sbc	r30, r20
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1760:	f5 0b       	sbc	r31, r21

00001762 <__udivmodsi4_ep>:
__udivmodsi4_ep():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1762:	66 1f       	adc	r22, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1764:	77 1f       	adc	r23, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1766:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1768:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    176a:	1a 94       	dec	r1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    176c:	69 f7       	brne	.-38     	; 0x1748 <__udivmodsi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    176e:	60 95       	com	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1770:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1772:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1774:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1776:	9b 01       	movw	r18, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1778:	ac 01       	movw	r20, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    177a:	bd 01       	movw	r22, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    177c:	cf 01       	movw	r24, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    177e:	08 95       	ret

00001780 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1780:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1782:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1784:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1786:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1788:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    178a:	09 94       	ijmp

0000178c <_exit>:
exit():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    178c:	f8 94       	cli

0000178e <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    178e:	ff cf       	rjmp	.-2      	; 0x178e <__stop_program>
